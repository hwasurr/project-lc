{
	// Place your project-lc workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"ReactFunctionalComponent": {
		"prefix": "rfc",
		"body": [
			"export function ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}(): JSX.Element {",
			"  return (",
			"    $1",
			"  );",
			"}",
			"",
			"export default ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/};"
		]
	},
	"SSGNextComponent": {
		"prefix": "nextssg",
		"body": [
			"import { GetStaticProps, GetStaticPropsContext, InferGetStaticPropsType } from 'next';",
			"",
			"interface ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Props {",
			"  ${1:_default}: any;",
			"}",
			"",
			"export const getStaticProps: GetStaticProps<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Props> = async (",
			"  context: GetStaticPropsContext,",
			") => {",
			"  return {",
			"    props: {",
			"      $1: 'snippet default',",
			"    },",
			"  };",
			"};",
			"",
			"export function ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}({",
			"  $1,",
			"}: InferGetStaticPropsType<typeof getStaticProps>): JSX.Element {",
			"  return ${2:<div />};",
			"}",
			"",
			"export default ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/};",
			""
		]
	},
}