{
	"ReactFunctionalComponent": {
		"prefix": "rfc",
		"description": "기본 컴포넌트를 생성합니다.",
		"body": [
			"export function ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}(): JSX.Element {",
			"  return (",
			"    $1",
			"  );",
			"}",
			"",
			"export default ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/};"
		]
	},
	"SSGNextComponent": {
		"prefix": "nextssg",
		"description": "nextjs 정적 사이트 생성 컴포넌트를 생성합니다.",
		"body": [
			"import { GetStaticProps, GetStaticPropsContext, InferGetStaticPropsType } from 'next';",
			"",
			"interface ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Props {",
			"  ${1:_default}: any;",
			"}",
			"",
			"export const getStaticProps: GetStaticProps<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Props> = async (",
			"  context: GetStaticPropsContext,",
			") => {",
			"  return {",
			"    props: {",
			"      $1: 'snippet default',",
			"    },",
			"  };",
			"};",
			"",
			"export function ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}({",
			"  $1,",
			"}: InferGetStaticPropsType<typeof getStaticProps>): JSX.Element {",
			"  return ${2:<div />};",
			"}",
			"",
			"export default ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/};",
			""
		]
	},
	"SSRNextComponent": {
		"prefix": "nextssr",
		"description": "nextjs 서버사이드 렌더링 컴포넌트를 생성합니다.",
		"body": [
			"import {",
			"  GetServerSideProps,",
			"  GetServerSidePropsContext,",
			"  InferGetServerSidePropsType,",
			"} from 'next';",
			"",
			"interface ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Props {",
			"  ${1:_default}: any;",
			"}",
			"",
			"export const getServerSideProps: GetServerSideProps<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Props> = async (",
			"  context: GetServerSidePropsContext,",
			") => {",
			"  return {",
			"    props: {",
			"      $1: 'snippet default',",
			"    },",
			"  };",
			"};",
			"",
			"export function ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}({",
			"  $1,",
			"}: InferGetServerSidePropsType<typeof getServerSideProps>): JSX.Element {",
			"  return ${2:<div />};",
			"}",
			"",
			"export default ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/};",
			"",
		]
	},
	"ReactQuery query hook for next": {
		"prefix": "nextrqquery",
		"description": "nextjs환경에 맞는 리액트 쿼리 훅을 생성합니다.",
		"body": [
			"import { useQuery } from 'react-query';",
			"import axios from '../../axios';",
			"",
			"export interface ${TM_FILENAME_BASE/use//} {",
			"  _field: 'default field';",
			"}",
			"",
			"export const ${TM_FILENAME_BASE/use/get/} = async (): Promise<${TM_FILENAME_BASE/use//}> => {",
			"  return axios.get<${TM_FILENAME_BASE/use//}>('/$1').then((res) => res.data);",
			"};",
			"",
			"export const ${TM_FILENAME_BASE} = (initialData: ${TM_FILENAME_BASE/use//}) => {",
			"  return useQuery<${TM_FILENAME_BASE/use//}>('${TM_FILENAME_BASE/use//}', ${TM_FILENAME_BASE/use/get/}, {",
			"    initialData,",
			"  });",
			"};",
			"",
		]
	},
	"ReactQuery mutation hook for next": {
		"prefix": "nextrqmutation",
		"description": "nextjs환경에 맞는 리액트 쿼리 뮤테이션 훅을 생성합니다.",
		"body": [
			"import { useMutation } from 'react-query';",
			"import axios from '../../axios';",
			"",
			"export interface ${TM_FILENAME_BASE}Dto {",
			"  _field: 'default field';",
			"}",
			"export type ${TM_FILENAME_BASE}Res = ${3:boolean};",
			"",
			"export const ${TM_FILENAME_BASE} = () => {",
			"  return useMutation((dto: ${TM_FILENAME_BASE}Dto) =>",
			"    axios.${1|post,patch,put,delete|}<${TM_FILENAME_BASE}Res>('/$2', dto),",
			"  );",
			"};",
			"",
		]
	}
}