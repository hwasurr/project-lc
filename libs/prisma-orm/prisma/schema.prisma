generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount", "orderByRelation", "referentialActions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Seller {
  id                         Int                          @id @default(autoincrement())
  email                      String                       @unique
  name                       String?
  password                   String?
  shopName                   String?
  goods                      Goods[]
  loginHistory               LoginHistory[]
  sellerBusinessRegistration SellerBusinessRegistration[]
  sellerSettlementAccount    SellerSettlementAccount[]
  sellerSettlements          SellerSettlements[]
  socialAccounts             SellerSocialAccount[]
}

model SellerBusinessRegistration {
  id                         Int    @id @default(autoincrement())
  sellerEmail                String
  companyName                String
  businessRegistrationNumber String
  representativeName         String
  businessType               String
  businessItem               String
  businessAddress            String
  taxInvoiceMail             String
  fileName                   String
  seller                     Seller @relation(fields: [sellerEmail], references: [email])

  @@index([sellerEmail, id], name: "BusinessRegistrationIndex")
}

model SellerSettlements {
  id          Int      @id @default(autoincrement())
  sellerEmail String
  date        DateTime @default(now())
  state       Int      @default(0) @db.UnsignedTinyInt
  amount      Int      @default(0)
  seller      Seller   @relation(fields: [sellerEmail], references: [email])

  @@index([sellerEmail, id], name: "SellerSettlementsIndex")
}

model SellerSettlementAccount {
  id          Int    @id @default(autoincrement())
  sellerEmail String
  bank        String
  number      String
  name        String
  seller      Seller @relation(fields: [sellerEmail], references: [email])

  @@index([sellerEmail, id], name: "SellerSettlementAccountIndex")
}

model MailVerificationCode {
  id               Int      @id @default(autoincrement())
  verificationCode String
  createDate       DateTime @default(now())
  email            String   @default("")
}

model SellerSocialAccount {
  serviceId    String   @id
  provider     String
  name         String
  registDate   DateTime @default(now())
  profileImage String?
  accessToken  String?
  refreshToken String?
  sellerId     Int
  seller       Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([sellerId], name: "sellerId")
}

model Goods {
  id                      Int                          @id @default(autoincrement())
  sellerId                Int
  goods_name              String
  summary                 String
  goods_status            GoodsStatus                  @default(normal)
  cancel_type             String                       @default("0")
  contents                String?                      @db.LongText
  contents_mobile         String?                      @db.LongText
  common_contents         String                       @db.LongText
  shipping_policy         ShopOrGoods                  @default(shop)
  goods_shipping_policy   LimitOrUnlimit               @default(unlimit)
  unlimit_shipping_price  Int?                         @db.UnsignedInt
  limit_shipping_ea       Int?                         @db.UnsignedTinyInt
  limit_shipping_price    Int?                         @db.UnsignedInt
  limit_shipping_subprice Int?                         @db.UnsignedTinyInt
  shipping_weight_policy  Goods_shipping_weight_policy @default(shop)
  min_purchase_limit      Goods_min_purchase_limit     @default(unlimit)
  min_purchase_ea         Int?                         @db.UnsignedMediumInt
  max_purchase_limit      Goods_max_purchase_limit     @default(unlimit)
  max_purchase_ea         Int?                         @db.UnsignedMediumInt
  max_urchase_order_limit Int?                         @db.UnsignedMediumInt
  admin_memo              String?                      @db.Text
  option_use              String                       @default("0")
  option_view_type        OptionViewType               @default(divide)
  option_suboption_use    String                       @default("0")
  member_input_use        String                       @default("0")
  image                   String
  goods_view              GoodsView                    @default(look)
  regist_date             DateTime                     @default(now())
  runout_policy           RunoutPolicy?                @default(unlimited)
  update_date             DateTime                     @default(now()) @updatedAt
  seller                  Seller                       @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  confirmation            GoodsConfirmation?
  options                 GoodsOptions[]

  @@index([sellerId], name: "sellerId")
}

model GoodsConfirmation {
  id                         Int                       @id @default(autoincrement())
  goodsId                    Int                       @unique
  status                     GoodsConfirmationStatuses @default(waiting)
  firstmallGoodsConnectionId Int?
  goods                      Goods                     @relation(fields: [goodsId], references: [id], onDelete: Cascade)
}

model GoodsOptions {
  id             Int                    @id @default(autoincrement())
  goodsId        Int
  default_option YesOrNo                @default(n)
  option_type    String                 @default("direct")
  option_title   String?
  option_code    String?
  consumer_price Decimal                @db.Decimal(10, 2)
  price          Decimal                @db.Decimal(10, 2)
  color          String?                @db.VarChar(10)
  weight         Float?
  option_view    YesOrNo_UPPERCASE      @default(Y)
  option1        String?
  goods          Goods                  @relation(fields: [goodsId], references: [id], onDelete: Cascade)
  supply         GoodsOptionsSupplies[]

  @@index([goodsId], name: "goodsId")
}

model GoodsOptionsSupplies {
  id             Int          @id @default(autoincrement())
  goodsOptionsId Int
  stock          Int          @db.UnsignedInt
  badstock       Int?         @db.UnsignedInt
  safe_stock     Int?         @default(0)
  goodsOptions   GoodsOptions @relation(fields: [goodsOptionsId], references: [id], onDelete: Cascade)

  @@index([goodsOptionsId], name: "goodsOptionsId")
}

model LoginHistory {
  id         Int      @id @default(autoincrement())
  sellerId   Int?
  method     String
  ip         String
  device     String
  ua         String
  createDate DateTime @default(now())
  country    String?
  city       String?
  seller     Seller?  @relation(fields: [sellerId], references: [id])

  @@index([sellerId], name: "sellerId")
}

enum GoodsConfirmationStatuses {
  waiting
  confirmed
  rejected
}

enum GoodsStatus {
  normal
  runout
  purchasing
  unsold
}

enum GoodsView {
  look
  notLook
}

enum RunoutPolicy {
  stock
  ableStock
  unlimited
}

enum ShopOrGoods {
  shop
  goods
}

enum LimitOrUnlimit {
  unlimit
  limit
}

enum OptionViewType {
  divide
  join
}

enum YesOrNo {
  y
  n
}

enum YesOrNo_UPPERCASE {
  Y
  N
}

enum Goods_shipping_weight_policy {
  shop
  goods
}

enum Goods_min_purchase_limit {
  unlimit
  limit
}

enum Goods_max_purchase_limit {
  unlimit
  limit
}
