generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native"]
  previewFeatures = ["interactiveTransactions", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Seller {
  id                         Int                          @id @default(autoincrement())
  email                      String?                      @unique
  name                       String?
  password                   String?
  goods                      Goods[]
  goodsCommonInfo            GoodsInfo[] // 상품공통정보
  sellerBusinessRegistration SellerBusinessRegistration[]
  sellerSettlementAccount    SellerSettlementAccount[]
  sellerShop                 SellerShop?
  sellerSettlements          SellerSettlements[]
  socialAccounts             SellerSocialAccount[]
  shippingGroups             ShippingGroup[]
  SellerContacts             SellerContacts[]
  LiveShopping               LiveShopping[]
  OrderCancelRequests        SellerOrderCancelRequest[] // 판매자의 결제취소요청
  avatar                     String?
  agreementFlag              Boolean                      @default(false) // 이용동의 
  inactiveFlag               Boolean                      @default(false)
  goodsReviewComments        GoodsReviewComment[] // 판매자가 작성한 상품리뷰댓글
  goodsInquiryComments       GoodsInquiryComment[] // 판매자가 작성한 상품문의답변
}

// 마케터의 상정정보
model SellerShop {
  sellerId Int    @unique
  shopName String
  seller   Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)

}

// 관리자가 설정할 마일리지 세팅
model MileageSetting {
  id                    Int             @id @default(autoincrement())
  defaultMileagePercent Int             @default(0) // 상품 구매시 결제금액의 몇퍼센트를 적립금으로 지금할지
  mileageStrategy       MileageStrategy @default(onPaymentPriceExceptMileageUsage) // 적립금 지급방식
}

// [enum] 적립금 지급 방식(결제시 적립금을 사용한 경우)
enum MileageStrategy {
  onPaymentPriceExceptMileageUsage // (결제금액 - 사용한 적립금)기준으로 적립금 지급
  onPaymentPrice // 전체 결제금액 기준으로 적립금 지급
  noMileage // 적립금 사용시 적립금 지금안함
}

// 사업자등록정보
model SellerBusinessRegistration {
  id                               Int                               @id @default(autoincrement()) // 사업자 등록증 DB 고유 번호
  sellerId                         Int
  companyName                      String // 상호명
  businessRegistrationNumber       String // 사업자등록증 등록번호
  representativeName               String // 대표자명
  businessType                     String // 업태
  businessItem                     String // 종목
  businessAddress                  String // 사업장 주소
  taxInvoiceMail                   String // 세금계산서 전용 이메일
  businessRegistrationImageName    String // 사업자등록증 이미지 파일명
  mailOrderSalesNumber             String // 통신판매업 신고번호 
  mailOrderSalesImageName          String // 통신판매업 이미지 파일명
  BusinessRegistrationConfirmation BusinessRegistrationConfirmation?
  seller                           Seller                            @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  confirmHistory ConfirmHistory[]
  @@index(name: "BusinessRegistrationIndex", fields: [id])
}

// 사업자등록정보 검수정보
model BusinessRegistrationConfirmation {
  id                           Int                        @id @default(autoincrement())
  status                       BusinessRegistrationStatus @default(waiting) // 검수 상태
  rejectionReason              String?                    @db.Text // 반려사유 - 관리자가 입력
  SellerBusinessRegistrationId Int                        @unique
  SellerBusinessRegistration   SellerBusinessRegistration @relation(fields: [SellerBusinessRegistrationId], references: [id])
}

// 정산 내역
model SellerSettlements {
  id                   Int                     @id @default(autoincrement()) // 정산 내역 고유 번호
  state                Int                     @default(0) @db.UnsignedTinyInt // 정산 상태
  totalPrice           Int                     @default(0) // 총 정산 대상 금액 (결제금액, 판매수량*판매금액 + 배송비)
  totalEa              Int                     @default(0) // 총 정산 상품 수량
  totalAmount          Int                     @default(0) // 총 정산 금액
  round                String // 정산회차 연도/월/차수 (YYYY/MM/0차)
  date                 DateTime                @default(now()) // 정산마감일: 정산이 마감된 날짜 = 정산 시점
  startDate            DateTime // 발생일: 정산대상(결제/취소/환불/...)이 발생한 날짜
  doneDate             DateTime? // 완료일: 정산대상(구매확정/취소/환불/...)이 완료된 날짜
  totalCommission      Int                     @default(0) // 총 수수료 금액
  pgCommission         Int                     @default(0) // 전자결제 수수료
  pgCommissionRate     Decimal                 @default("0.00") @db.Decimal(10, 2) // 전자결제 수수료율
  paymentMethod        String? // 결제수단
  pg                   String? // pg사
  sellerId             Int
  exportId             Int                     @unique // 이 정산의 출고고유번호 (fm_goods_export.export_seq)
  exportCode           String // 이 정산의 출고코드 (fm_goods_export.export_code)
  buyer                String // 구매자명
  recipient            String // 수령자명
  orderId              String // 주문 고유번호 (퍼스트몰 fm_order.order_seq)
  shippingId           Int // 주문 배송묶음 번호 (퍼스트몰 fm_order_item.shipping_seq)
  shippingCost         Decimal                 @default("0.00") @db.Decimal(10, 2) // 이 정산에 포함된  배송비
  shippingCostIncluded Boolean                 @default(false) // 이 출고 정산에 order_shipping 배송비에 대한 포함이 이루어졌는지 여부
  seller               Seller                  @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  settlementItems      SellerSettlementItems[]

  @@index([id], name: "SellerSettlementsIndex")
}

// 정산 아이템(주문 정보)
model SellerSettlementItems {
  id                        Int               @id @default(autoincrement())
  itemId                    Int? // 주문상품 고유번호 (퍼스트몰 fm_order_item.item_seq)
  optionId                  Int? // 주문상품옵션 고유번호 (퍼스트몰 fm_order_item_option.option_seq)
  goods_image               String? // 상품 대표이미지 url
  goods_name                String? // 상품명
  option_title              String? // 옵션명 fm_goods_options.option_title
  option1                   String? // 옵션값 fm_goods_options.option1
  ea                        Int               @default(0) // 수량
  pricePerPiece             Int               @default(0) // 1개당 가격
  price                     Int               @default(0) // 1개당 가격 * 수량
  broadcasterCommissionRate Decimal           @default("0.00") @db.Decimal(10, 2) // 방송인 수수료율 (0%~100% 사이값)
  whiletrueCommissionRate   Decimal           @default("0.00") @db.Decimal(10, 2) // 와일트루 수수료율 (0%~100% 사이값)
  broadcasterCommission     Int               @default(0) // 방송인 수수료 금액
  whiletrueCommission       Int               @default(0) // 와일트루 수수료 금액
  sellType                  SellType? // 판매 유형
  liveShoppingId            Int? // 라이브쇼핑 고유번호 (Relational)
  liveShopping              LiveShopping?     @relation(fields: [liveShoppingId], references: [id], onDelete: SetNull)
  productPromotionId        Int?
  productPromotion          ProductPromotion? @relation(fields: [productPromotionId], references: [id], onDelete: SetNull)

  sellerSettlementsId Int?
  SellerSettlements   SellerSettlements? @relation(fields: [sellerSettlementsId], references: [id], onDelete: Cascade)

  relatedOrderId Int? // (project-lc Order테이블의) 주문 고유번호 => 기존 퍼스트몰 fm_order.order_seq 저장하는 컬럼명이 orderId라서 relatedOrderId라고 씀
  order          Order?  @relation(fields: [relatedOrderId], references: [id], onDelete: SetNull)
  exportId       Int?
  export         Export? @relation(fields: [exportId], references: [id], onDelete: SetNull)
}

// 판매자 정산 계좌 정보
model SellerSettlementAccount {
  id                         Int    @id @default(autoincrement())
  sellerId                   Int
  bank                       String
  number                     String
  name                       String
  settlementAccountImageName String
  seller                     Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  confirmHistory ConfirmHistory[]
  @@index([id], name: "SellerSettlementAccountIndex")
}

model MailVerificationCode {
  id               Int      @id @default(autoincrement())
  verificationCode String
  createDate       DateTime @default(now())
  email            String   @default("")
}

model SellerSocialAccount {
  serviceId    String   @id // 인증 결과로 해당 서비스에서 받은 고유 식별자
  provider     String // 'google' | 'kakao' | 'naver'
  name         String
  registDate   DateTime @default(now())
  profileImage String?
  accessToken  String?
  refreshToken String?
  sellerId     Int
  seller       Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([sellerId], name: "sellerId")
}

// 판매자가 등록한 라이브 쇼핑 담당자 연락처들
model SellerContacts {
  id           Int            @id @default(autoincrement())
  sellerId     Int // 판매자 아이디
  email        String         @default("") //등록한 이메일
  phoneNumber  String         @default("") // 등록한 전화번호
  isDefault    Boolean        @default(false) // 기본 연락처 설정 여부
  seller       Seller         @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  LiveShopping LiveShopping[]
  createDate   DateTime       @default(now())
}

// ****************************
// * firstmall과 동일한 상품 정보 (컬럼명도 동일하게 ��져갑니다.)
// 상품 - fm_goods
model Goods {
  id                      Int                @id @default(autoincrement())
  sellerId                Int
  seller                  Seller             @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  options                 GoodsOptions[]
  confirmation            GoodsConfirmation? // 상품 검수
  // 여기서부터는 퍼스트몰 컬럼과 동일한 컬럼
  goods_name              String // 상품명
  summary                 String // 간략 설명
  goods_status            GoodsStatus        @default(normal) // 상�� 상태
  cancel_type             String             @default("0") // 청약철회 가능 여부, "0" or "1"
  contents                String?            @db.LongText // 상세 설명 PC 화면
  contents_mobile         String?            @db.LongText // 상세 설명 Mobile 화면
  shipping_policy         ShopOrGoods        @default(shop) // 배송 정책 선택
  goods_shipping_policy   LimitOrUnlimit     @default(unlimit) // 개별 배송비 선택
  unlimit_shipping_price  Int?               @db.UnsignedInt // 배송비
  limit_shipping_ea       Int?               @db.UnsignedTinyInt // 개별 배송 포장 단위
  limit_shipping_price    Int?               @db.UnsignedInt // 개별 배송 단위별 배송비
  limit_shipping_subprice Int?               @db.UnsignedTinyInt // 개별 배송 추가 배송비
  shipping_weight_policy  ShopOrGoods        @default(shop) // 해외 배송 중량 정책
  min_purchase_limit      LimitOrUnlimit     @default(unlimit) // 최소 구매 수량 사용 여부
  min_purchase_ea         Int?               @db.UnsignedMediumInt // 최소 구매 수량
  max_purchase_limit      LimitOrUnlimit     @default(unlimit) // 최대 구매 수량 사용 여부
  max_purchase_ea         Int?               @db.UnsignedMediumInt // 최대 구매 수량
  max_urchase_order_limit Int?               @db.UnsignedMediumInt // 최대 구매 수량 주문 횟수
  admin_memo              String?            @db.Text // 관리자 메모
  option_use              String             @default("0") // 옵션 사용 여부 "0" or "1"
  option_view_type        OptionViewType     @default(divide) // 필수옵션-분리/합체형 구분
  option_suboption_use    String             @default("0") // 추가 옵션 사용 여부 "0" or "1"
  member_input_use        String             @default("0") // 추가 구성 옵션 사용 여부 "0" or "1"
  image                   GoodsImages[] // 상품 이미지 - fm_goods_image
  goods_view              GoodsView          @default(look) // 노출
  regist_date             DateTime           @default(now()) // 상품등록일 (크크쇼에 판매자가 등록한 날짜)
  update_date             DateTime           @default(now()) @updatedAt // 수정일 (�����스트몰에는 코멘트에 구매수량 이라고 되어있음, 크크쇼 에서수정한날짜)
  runout_policy           RunoutPolicy?      @default(unlimited) // 재고 정책
  ShippingGroup           ShippingGroup?     @relation(fields: [shippingGroupId], references: [id])
  shippingGroupId         Int?
  GoodsInfo               GoodsInfo?         @relation(fields: [goodsInfoId], references: [id])
  goodsInfoId             Int?

  LiveShopping         LiveShopping[]
  productPromotion     ProductPromotion[] // 하나의 상품이 여러개 홍보아이템 등록될 수 있음
  coupons              Coupon[] // 상품에 적용가능한 쿠폰
  searchKeyword        String? // ',' 구분자로 하는 검색키워드의 문자열
  cartItems            CartItem[] // 연결된 장바구니 상품
  orrderItems          OrderItem[] // 연결된 주문상품
  reviews              GoodsReview[] // 작성된 리뷰
  informationSubjectId Int? // 정보제공고시 품목고유번호
  informationSubject   GoodsInformationSubject? @relation(fields: [informationSubjectId], references: [id]) // 해당되는 정보제공고시 품목
  informationNotice    GoodsInformationNotice? // 연결된 상품정보제공 내용
  categories           GoodsCategory[] // 상품이 해당하는 카테고리들
  goodsInquiry         GoodsInquiry[]

  @@index([sellerId], name: "sellerId")
  @@fulltext([goods_name])
}

model GoodsConfirmation {
  id                         Int                       @id @default(autoincrement())
  goodsId                    Int                       @unique
  status                     GoodsConfirmationStatuses @default(waiting) // 검수 상태
  firstmallGoodsConnectionId Int? // 퍼스트몰 상품 고유 ID (fm_goods.goods_seq)
  goods                      Goods                     @relation(fields: [goodsId], references: [id], onDelete: Cascade)
  rejectionReason            String?                   @db.Text // 반려사유 - 관리자가 입력

  @@index([firstmallGoodsConnectionId], name: "firstmallGoodsConnectionId")
}

model GoodsOptions {
  id             Int                   @id @default(autoincrement())
  goods          Goods                 @relation(fields: [goodsId], references: [id], onDelete: Cascade)
  goodsId        Int
  supply         GoodsOptionsSupplies?
  // 여기서부터는 퍼스트몰 컬럼과 동일한 컬럼
  default_option YesOrNo               @default(n) // 옵션 필수 �������부
  option_type    String                @default("direct") // 기본값인듯? 설명도 direct
  option_title   String? // 옵션명 fm_goods_options.option_title
  option1        String? // 옵션값 fm_goods_options.option1
  option_code    String? // 옵션코드
  consumer_price Decimal               @db.Decimal(10, 2) // 소비자가 (미할인가)
  price          Decimal               @db.Decimal(10, 2) // 판매가 (할인가)
  weight         Float? //옵션 개당 무게 (단위 kg)
  option_view    YesOrNo_UPPERCASE     @default(Y) // 옵션 노출 여부

  @@index([goodsId], name: "goodsId")
}

// 상품 옵션 재고 - fm_goods_suply
model GoodsOptionsSupplies {
  id             Int          @id @default(autoincrement())
  goodsOptionsId Int          @unique
  // 여기서부터는 퍼스트몰 컬럼과 동일한 컬럼
  stock          Int          @db.UnsignedInt // 재고
  badstock       Int?         @db.UnsignedInt // 불량재고
  safe_stock     Int?         @default(0) // 각 매장의 옵션별 안전 재고
  goodsOptions   GoodsOptions @relation(fields: [goodsOptionsId], references: [id], onDelete: Cascade)

  @@index([goodsOptionsId], name: "goodsOptionsId")
}

// 상품 사진 fm_goods_image
model GoodsImages {
  id         Int    @id @default(autoincrement())
  goods      Goods? @relation(fields: [goodsId], references: [id], onDelete: Cascade)
  goodsId    Int?
  image      String @db.VarChar(500)
  cut_number Int
}

// 상품 공통 정보
model GoodsInfo {
  id         Int    @id @default(autoincrement())
  sellerId   Int
  info_name  String
  info_value String @db.LongText // 상품 공통 정보

  goods  Goods[]
  seller Seller  @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model LoginHistory {
  id         Int      @id @default(autoincrement())
  userEmail  String
  userType   String
  method     String // 로그인 방식
  ip         String // 로그인 IP
  country    String? // 로그인 국가
  city       String? // 로그인 도시
  device     String // 로그인 기기
  ua         String // User-Agent 문자열
  createDate DateTime @default(now()) // 로그인 일시

  @@index([userEmail, userType])
}

// 상품 검수 상태 정보
enum GoodsConfirmationStatuses {
  waiting // 대기
  confirmed // 승인
  rejected // 거절
  needReconfirmation // 재검수 대기
}

//  검수 상태 정보
enum BusinessRegistrationStatus {
  waiting // 대기
  confirmed // 승인
  rejected // 거절
}

// * 상품 - 상태
enum GoodsStatus {
  normal // 정상
  runout // 품절
  purchasing // 재고확보중
  unsold // 판매중지
}

// * 상품 - 노출
enum GoodsView {
  look // 노출
  notLook // 미노출
}

// * 상품 - 재고 정책 (재고판매)
enum RunoutPolicy {
  stock //재고
  ableStock //가용재고
  unlimited //무제한
}

// * 상품 - 배송 정책 선택
// * 상품 - 헤외 배송 중량 정책
enum ShopOrGoods {
  shop
  goods
}

// * 상품- 개별 배송비 선택
// * 상품 - 최소 구매 수량 사용 여부
// * 상품 - 최대 구매 수량 사용 여부
enum LimitOrUnlimit {
  unlimit
  limit
}

// * 상품 - 필수옵션-분리/합체형 구
enum OptionViewType {
  divide
  join
}

enum YesOrNo {
  y
  n
}

enum YesOrNo_UPPERCASE {
  Y
  N
}

// [enum] 판매유형(=주문경로) (라이브쇼핑, 상품홍보, 기본판매, 향후 추가 가능한 어떠한 형태의 프로모션...)
enum SellType {
  liveShopping // 라이브쇼핑
  productPromotion // 상품홍보
  normal // 기본판매
}

// ****************************
// 배송비 정책 테이블 - fm_shipping_grouping 참고
model ShippingGroup {
  id                      Int                @id @default(autoincrement())
  seller                  Seller             @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId                Int
  shippingSets            ShippingSet[]
  baseAddress             String // 기본주소
  detailAddress           String // 상세주소
  postalCode              String // 우편번호
  goods                   Goods[]
  // 이하 퍼스트몰 fm_shipping_grouping 과  동일한컬럼
  shipping_group_name     String             @db.VarChar(255) // '배송그룹명',
  shipping_calcul_type    ShippingCalculType @default(bundle) // '배송비계산기준', free무료, bundle묶음, each개별 배송비 추가설정
  shipping_calcul_free_yn YesOrNo_UPPERCASE? @default(N) // '계산 무료화 여부',
  shipping_std_free_yn    YesOrNo_UPPERCASE? @default(N) // '기본배송비 무료화',
  shipping_add_free_yn    YesOrNo_UPPERCASE? @default(N) // '추가배송비 무료화',
  orderItems              OrderItem[] // 해당 배송비정책 참조하는 주문 상품들
  cartItems               CartItem[] // 해당 배송비정책 참조하는 장바구니 상품들
}

// 배송비 계산 기준
enum ShippingCalculType {
  free //무료
  bundle // 묶음
  each // 개별
}

// ****************************
// 배송 설정 테이블 - fm_shipping_set 참고
model ShippingSet {
  id                  Int                @id @default(autoincrement())
  shippingOptions     ShippingOption[]
  shippingGroup       ShippingGroup      @relation(fields: [shipping_group_seq], references: [id], onDelete: Cascade)
  // 이하 퍼스트몰 fm_shipping_set 과 동일한 컬럼
  shipping_group_seq  Int
  shipping_set_code   ShippingSetCode    @default(delivery) // '배송설정 코드', delivery 택배/direct_delivery 직접배송/quick 퀵서비스/freight 화물배송/custom 직접입력/direct_store 매장수령
  shipping_set_name   String             @db.VarChar(50) // 배송설정 명',
  default_yn          YesOrNo_UPPERCASE? @default(N) // 대표 선택 여부 - 추후 배송가능 국가별 대표지정 현재안씀.',
  delivery_nation     DeliveryNation     @default(korea) // '배송가능국가',
  delivery_limit      LimitOrUnlimit     @default(unlimit) // 배송지역 제한 - unlimit - 전국(전세계) / limit - 지정지역(국가)',
  refund_shiping_cost Decimal?           @db.Decimal(11, 2) // '반품 배송비',
  swap_shiping_cost   Decimal?           @db.Decimal(11, 2) // '맞교환 배송비',
  prepay_info         PrepayInfo         @default(delivery) // 선불/착불 정보
  shiping_free_yn     YesOrNo_UPPERCASE  @default(N) //'무료배송시 반품왕복배송비',
}

// 착불/선불 정보
enum PrepayInfo {
  delivery
  postpaid
  all
}

// 배송설정 코드
enum ShippingSetCode {
  delivery // 택배
  direct_delivery // 직접배송
  quick // 퀵서비스
  freight // 화물배송
  direct_store // 매장수령
  custom // 직접입력
}

// 배송가능 국가
enum DeliveryNation {
  korea // 대한민국
  global // 해외
}

// 배송 방법 테이블 fm_shipping_option 참고
model ShippingOption {
  id                Int                @id @default(autoincrement())
  shippingCost      ShippingCost[]
  shippingSet       ShippingSet        @relation(fields: [shipping_set_seq], references: [id], onDelete: Cascade)
  // 이하 퍼스트몰 fm_shipping_option 과 동일한 컬럼
  shipping_set_seq  Int
  shipping_set_type ShippingSetType    @default(std) // 배송설정 타입 std - 기본 / add - 추가
  shipping_opt_type ShippingOptType    @default(free) //'배송방법 타입 free - 무료 / fixed - 고정 / amount - 금액 / cnt - 수량 / weight - 무게',
  default_yn        YesOrNo_UPPERCASE? @default(N) // 기본 옵션인지 여부
  section_st        Float? // 시작구간(무게, 금액, 수량)
  section_ed        Float? // 끝구간(무게, 금액, 수량)
}

// 배송설정 타입
enum ShippingSetType {
  std // 기본
  add // 추가
}

// 배송방법 타입
enum ShippingOptType {
  free // 무료
  fixed // 고정
  amount // 금액(구간입력)
  amount_rep // 금액(구간반복)
  cnt // 수량(구간입력)
  cnt_rep // 수량(구간반복)
  weight // -> 무게(구간입력)
  weight_rep // 무게(구간반복)
}

// 배송비 금액 테이블 fm_shipping_cost 참고,
// 배송지역 상세 부분 구현하지 못하여 배송비 금액테이블 부분에 배송지역 추가함
model ShippingCost {
  id                 Int            @id @default(autoincrement())
  shippingOption     ShippingOption @relation(fields: [shipping_opt_seq], references: [id], onDelete: Cascade)
  shipping_opt_seq   Int
  shipping_cost      Decimal?       @db.Decimal(11, 2) // 금액
  shipping_area_name String         @db.VarChar(255) // '지역명',
}

// -------------------------------------------------
// 방송인
// -------------------------------------------------
model Broadcaster {
  id                          Int                           @id @default(autoincrement())
  email                       String?                       @unique // 방송인 이메일(가입시 사용)
  userName                    String?                       @db.VarChar(20) // 유저의 실명
  userNickname                String?                       @db.VarChar(20) // 유저의 활동명
  overlayUrl                  String?                       @unique // 라이브커머스 오버레이 URL 
  createDate                  DateTime                      @default(now())
  deleteFlag                  Boolean                       @default(false) // 회원탈퇴 여부
  password                    String? // 비밀번호
  avatar                      String?
  agreementFlag               Boolean                       @default(false) // 이용동의 
  liveShoppingPurchaseMessage LiveShoppingPurchaseMessage[]
  LiveShopping                LiveShopping[]
  socialAccounts              BroadcasterSocialAccount[]
  broadcasterContacts         BroadcasterContacts[]
  broadcasterAddress          BroadcasterAddress?
  channels                    BroadcasterChannel[]
  BroadcasterSettlementInfo   BroadcasterSettlementInfo?
  BroadcasterSettlements      BroadcasterSettlements[]
  BroadcasterPromotionPage    BroadcasterPromotionPage? // 방송인 상품홍보
  inactiveFlag                Boolean                       @default(false)

  cartItemSupport   CartItemSupport[] // 장바구니에 담긴 상품의 후원 정보(결제되지 않은 상태이므로 조회할 일 없을듯)
  orderItemSupport  OrderItemSupport[] // 주문된 상품의 후원정보 => 방송인이 후원받은 내역 조회시 사용할듯
  followers         CustomerFollowBroadcaster[] // 팔로우하는 소비자
  productPromotions ProductPromotion[] // 홍보중인상품
  @@fulltext([userNickname])
}

// 방송인 소셜로그인 계정
model BroadcasterSocialAccount {
  serviceId     String      @id // 인증 결과로 해당 서비스에서 받은 고유 식별자
  provider      String // 'google' | 'kakao' | 'naver'
  name          String
  registDate    DateTime    @default(now())
  profileImage  String?
  accessToken   String?
  refreshToken  String?
  broadcasterId Int
  broadcaster   Broadcaster @relation(fields: [broadcasterId], references: [id], onDelete: Cascade)

  @@index([broadcasterId], name: "broadcasterId")
}

// 방송인 연락처 정보
model BroadcasterContacts {
  id          Int      @id @default(autoincrement())
  name        String   @default("")
  email       String   @default("")
  phoneNumber String   @default("")
  isDefault   Boolean  @default(false)
  createDate  DateTime @default(now())

  broadcasterId Int?
  broadcaster   Broadcaster? @relation(fields: [broadcasterId], references: [id], onDelete: Cascade)
}

// 방송인 선물/샘플 수령 주소 정보
model BroadcasterAddress {
  id            Int      @id @default(autoincrement())
  address       String // 주소 (도로명)
  detailAddress String // 주소 상세
  postalCode    String // 우편 번호
  createDate    DateTime @default(now())

  broadcasterId Int?         @unique
  broadcaster   Broadcaster? @relation(fields: [broadcasterId], references: [id], onDelete: Cascade)
}

// 방송인 활동 플랫폼 채널정보(url)
model BroadcasterChannel {
  id            Int         @id @default(autoincrement())
  url           String // 채널 url (아프리카, 트위치, 유투브, 인스타그램 ...)
  createDate    DateTime    @default(now())
  broadcaster   Broadcaster @relation(fields: [broadcasterId], references: [id], onDelete: Cascade)
  broadcasterId Int
}

// 방송인 정산 내역
model BroadcasterSettlements {
  id    Int      @id @default(autoincrement()) // 정산 내역 고유 번호
  round String // 정산회차 연도/월/차수 (YYYY/MM/0차)
  date  DateTime @default(now()) // 정산마감일: 정산이 마감된 날짜 = 정산 시점

  broadcasterId              Int
  broadcaster                Broadcaster                  @relation(fields: [broadcasterId], references: [id], onDelete: Cascade)
  broadcasterSettlementItems BroadcasterSettlementItems[]

  @@unique([broadcasterId, round])
}

// 방송인 정산 내역 - 주문(출고)정보
model BroadcasterSettlementItems {
  id                        Int     @id @default(autoincrement())
  orderId                   String // 주문 고유번호 (퍼스트몰 fm_order.order_seq)
  exportCode                String // 이 정산의 출고 고유번호 (퍼스트몰 fm_goods_export.export_code)
  amount                    Int     @default(0) // 총 정산 수익 금액
  broadcasterCommissionRate Decimal @default("0.00") @db.Decimal(10, 2) // 방송인 수수료율 (0%~100% 사이값)

  sellType                 SellType? // 판매유형
  liveShoppingId           Int?
  liveShopping             LiveShopping?          @relation(fields: [liveShoppingId], references: [id], onDelete: SetNull)
  productPromotionId       Int?
  productPromotion         ProductPromotion?      @relation(fields: [productPromotionId], references: [id], onDelete: SetNull)
  broadcasterSettlementsId Int
  settlements              BroadcasterSettlements @relation(fields: [broadcasterSettlementsId], references: [id], onDelete: Cascade)

  relatedOrderId Int? // (project-lc Order테이블의) 주문 고유번호 => 기존 퍼스트몰 fm_order.order_seq 저장하는 컬럼명이 orderId라서 relatedOrderId라고 씀
  order          Order?  @relation(fields: [relatedOrderId], references: [id], onDelete: SetNull)
  exportId       Int?
  export         Export? @relation(fields: [exportId], references: [id], onDelete: SetNull)
}

// 방송인 정산을 위한 계약자, 계좌정보(방송인 정산등록정보)
model BroadcasterSettlementInfo {
  id                    Int                                    @id @default(autoincrement())
  type                  TaxationType                           @default(naturalPerson) // 과세유형 (개인 | 개인사업자) 
  name                  String // 개인 이름 혹은 개인사업자명
  idCardNumber          String // 암호화된 주민등록번호
  phoneNumber           String // 암호화된 휴대전화번호
  bank                  String // 은행이름
  accountNumber         String // 계좌번호
  accountHolder         String // 예금주
  idCardImageName       String // 주민등록번호 파일 s3에 저장된 파일명(s3)
  accountImageName      String // 통장사본 파일 s3에 저장된 파일명(s3)
  taxManageAgreement    Boolean                                @default(false) //세무처리 관련 동의(개인사업자에만 해당)
  personalInfoAgreement Boolean                                @default(false) //정산정보 등록에 따른 개인정보 수집 및 이용동의(필수)
  settlementAgreement   Boolean? //정산등록 신청서 제출에 대한 확인여부(과세유형이 개인사업자 경우만 필수)
  broadcaster           Broadcaster                            @relation(fields: [broadcasterId], references: [id], onDelete: Cascade)
  broadcasterId         Int                                    @unique
  confirmation          BroadcasterSettlementInfoConfirmation?
  confirmHistory        ConfirmHistory[]
}

// 방송인 정산 등록 정보 검수여부
model BroadcasterSettlementInfoConfirmation {
  id               Int                        @id @default(autoincrement())
  status           BusinessRegistrationStatus @default(waiting)
  rejectionReason  String?                    @db.Text // 반려사유 - 관리자가 입력
  settlementInfo   BroadcasterSettlementInfo  @relation(fields: [settlementInfoId], references: [id], onDelete: Cascade)
  settlementInfoId Int                        @unique
}

// 방송인 정산 등록 정보 - 계약자 과세유형
enum TaxationType {
  naturalPerson // 개인(사업소득)
  selfEmployedBusiness // 개인사업자
}

// 방송인 상품홍보 페이지 - 방송인과 1:1이나 상품홍보를 하지 않는 방송인도 존재함(방송인 테이블에서는 nullable 값)
model BroadcasterPromotionPage {
  id                Int                @id @default(autoincrement())
  url               String?            @unique // 퍼스트몰 카테고리 url(관리자가 입력) 
  comment           String? // 방송인 인사말
  broadcaster       Broadcaster        @relation(fields: [broadcasterId], references: [id], onDelete: Cascade) // 방송인 삭제시 함께 삭제
  broadcasterId     Int                @unique
  productPromotions ProductPromotion[] //
}

// -------------------------------------------------
// 상품 홍보 아이템 (방송인 - 상품 간 "홍보" 관계 테이블)
// -------------------------------------------------
model ProductPromotion {
  id                         Int                          @id @default(autoincrement())
  fmGoodsSeq                 Int? // 퍼스트몰 상품 id(특정 방송인이 홍보하는 형태로 업로드된 상품 고유번호), 관리자가 입력
  goods                      Goods                        @relation(fields: [goodsId], references: [id]) // project-lc 상품과 일대다 관계
  goodsId                    Int // project-lc 상품 id
  broadcasterPromotionPage   BroadcasterPromotionPage     @relation(fields: [broadcasterPromotionPageId], references: [id], onDelete: Cascade) // 방송인 상품홍보페이지와 일대다 관계
  broadcasterPromotionPageId Int
  broadcasterCommissionRate  Decimal                      @default("5") @db.Decimal(10, 2) // 방송인 수수료율 (0%~100% 사이값)
  whiletrueCommissionRate    Decimal                      @default("5") @db.Decimal(10, 2) // 와일트루 수수료율 (0%~100% 사이값)
  sellerSettlementItems      SellerSettlementItems[]
  broadcasterSettlementItems BroadcasterSettlementItems[]

  broadcasterId Int?
  broadcaster   Broadcaster? @relation(fields: [broadcasterId], references: [id], onDelete: Cascade)

}

// -------------------------------------------------
// 라이브 쇼핑
// -------------------------------------------------
model LiveShopping {
  id                          Int                           @id @default(autoincrement())
  broadcasterId               Int? //방송인의 아이디 
  liveShoppingName            String? // 라이브 쇼핑의 이름 
  sellerId                    Int // 판매자 ID
  goodsId                     Int // 상품 ID (project-lc goods Id)
  fmGoodsSeq                  Int?                          @unique // 퍼스트몰 상품 ID 라이브쇼핑진행을 위해 생성한 퍼스트몰 상품의 고유번호 (fm_goods.goods_seq)
  videoId                     Int?
  contactId                   Int? // 판매자 등록된 연락처 ID
  requests                    String?                       @db.LongText // 요청사항
  progress                    LiveShopppingProgressType     @default(registered) // 진행상태
  broadcastStartDate          DateTime? // 라이브 방송 시작 시간
  broadcastEndDate            DateTime? // 라이브 방송 종료 시간
  sellStartDate               DateTime? // 라이브커머스 상품판매 시작 시간
  sellEndDate                 DateTime? // 라이브커머스 상품판매 종료 시간
  createDate                  DateTime                      @default(now())
  rejectionReason             String?                       @db.Text // 방송 취소 또는 거절 사유
  broadcasterCommissionRate   Decimal                       @default("0") @db.Decimal(10, 2) // 판매금 중, 방송인이 가져가는 수수료 (0%~100% 사이값)
  whiletrueCommissionRate     Decimal                       @default("0") @db.Decimal(10, 2) // 판매금 중, project-lc(와일트루)가 가져가는 수수료 (0%~100% 사이값)
  desiredCommission           Decimal?                      @default("0") @db.Decimal(10, 2) // 희망판매수수료
  desiredPeriod               String?                       @default("무관") // 희망 진행 기간
  sellerContacts              SellerContacts?               @relation(fields: [contactId], references: [id])
  seller                      Seller                        @relation(fields: [sellerId], references: [id])
  goods                       Goods                         @relation(fields: [goodsId], references: [id])
  broadcaster                 Broadcaster?                  @relation(fields: [broadcasterId], references: [id])
  liveShoppingVideo           LiveShoppingVideo?            @relation(fields: [videoId], references: [id])
  SellerSettlementItems       SellerSettlementItems[]
  liveShoppingPurchaseMessage LiveShoppingPurchaseMessage[]
  BroadcasterSettlementItems  BroadcasterSettlementItems[]
  images                      LiveShoppingImage[]
  followers                   Customer[]
}

// 라이브 커머스 랭킹 테이블
model LiveShoppingPurchaseMessage {
  id                 Int          @id @default(autoincrement())
  nickname           String       @default("비회원") // 메세지 작성자의 닉네임
  text               String       @db.LongText // 메세지 내용
  price              Int // 구매금액
  phoneCallEventFlag Boolean      @default(false) // 전화 이벤트 참여 여부 
  giftFlag           Boolean      @default(false) // 스트리머����� 선물하기 여부
  loginFlag          Boolean      @default(true) // 회원 | 비회원 구분 \
  broadcaster        Broadcaster  @relation(fields: [broadcasterEmail], references: [email])
  broadcasterEmail   String // 스트리머의 아이디 
  createDate         DateTime     @default(now()) // 작성일자
  liveShopping       LiveShopping @relation(fields: [liveShoppingId], references: [id], onDelete: Cascade)
  liveShoppingId     Int // 해당 방송의 라이브 쇼핑 Id
}

enum LiveShopppingProgressType {
  registered // 등록됨
  adjusting // 조율중
  confirmed // 확정됨
  canceled // 취소됨
}

model LiveShoppingVideo {
  id           Int            @id @default(autoincrement())
  youtubeUrl   String?        @unique
  createDate   DateTime       @default(now())
  LiveShopping LiveShopping[]
}

enum LiveShoppingImageType {
  carousel //메인 캐러셀 이미지
  trailer //라이브예고용 이미지(인스타게시물) 
}

model LiveShoppingImage {
  id             Int                   @id @default(autoincrement())
  imageUrl       String?
  type           LiveShoppingImageType
  createDate     DateTime              @default(now())
  liveShopping   LiveShopping          @relation(fields: [liveShoppingId], references: [id], onDelete: Cascade)
  liveShoppingId Int
}

// 판매 수수료
model SellCommission {
  id                Int     @id @default(autoincrement())
  commissionRate    Decimal @default("5.00") @db.Decimal(10, 2) // 판매 수수료 퍼센티지 (0%~100% 사이값)
  commissionDecimal Decimal @default("0.05") @db.Decimal(10, 4) // 0~1사이의 값으로 표현한 판매수수료
}

// -------------------------------------------------
// 공지사항
// -------------------------------------------------
model Notice {
  id          Int      @id @default(autoincrement())
  title       String // 공지사항 글의 제목
  url         String // 공지사항 글의 notion URL
  postingFlag Boolean  @default(false) // 공지사항 글 게시여부
  postingDate DateTime @default(now()) // 공지사항 글 게시시간
}

// 전자 결제 수수료 정보 (퍼스트몰의 fm_account_payment_fee와 유사함, 와일트루 정책에 따르기위해 따로 구현)
model SellerPaymentCommission {
  id             Int        @id @default(autoincrement())
  type           String // 수수료종류 pg, shop, npg, npay, kakaopay, toss, ...
  payment        String // 결제수단 bank, card, account, virtual, cellphone, escrow_account, escrow_virtual, point, ...
  paymentName    String // 결제수단 이름
  commissionRate Decimal    @db.Decimal(10, 2) // 수수료율
  commissionUnit AmountUnit @default(P) // 수수료 부과 단위 (원 or 퍼센트)
  min            Int? // 최소 수수료
  max            Int? // 최대수수료
}

// [enum]금액에 적용하는 단위
enum AmountUnit {
  P // 퍼센트
  W // 원
}

// 판매자의 결제취소(결제취소)요청 테이블
model SellerOrderCancelRequest {
  id               Int                            @id @default(autoincrement())
  seller           Seller                         @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId         Int
  reason           String                         @db.VarChar(255) // 판매자의 결제취소사유
  orderSeq         String // 주문번호 fm_order.order_seq  bigInt로 지정하니 오류가 나서 string으로 저장
  status           SellerOrderCancelRequestStatus @default(waiting) // 관리자 처리 여부 기본: waiting, 처리 후 done
  createDate       DateTime                       @default(now())
  orderCancelItems SellerOrderCancelRequestItem[]

  @@index(orderSeq)
}

// 판매자의 결제취소(결제취소)요청 처리상태 (나중에 다른 상태가 생길 가능성을 고려하여 enum으로 둠)
enum SellerOrderCancelRequestStatus {
  waiting
  confirmed
}

// 판매자의 결제취소(결제취소)요청 상품 테이블
model SellerOrderCancelRequestItem {
  id                       Int                      @id @default(autoincrement())
  orderItemSeq             Int // 주문상품번호 fm_order_item.item_seq
  orderItemOptionSeq       Int // 주문상품옵션번호 fm_order_item_option.item_option_seq
  amount                   Int // 취소할 주문상품옵션의 개수
  sellerOrderCancelRequest SellerOrderCancelRequest @relation(fields: [orderSeq], references: [id], onDelete: Cascade)
  orderSeq                 Int
}

// 유저 알림메시지
model UserNotification {
  id         Int      @id @default(autoincrement())
  userEmail  String // 타겟 유저 이메일
  userType   String // seller, broadcaster
  title      String // 알림메시지 제목
  content    String   @db.Text // 알림메시지 내용
  readFlag   Boolean  @default(false) // 타겟 유저가 알림 읽었는지 여부
  createDate DateTime @default(now())

  @@index([userEmail, userType])
}

// 관리자 계정
model Administrator {
  id                  Int                   @id @default(autoincrement())
  email               String                @unique
  password            String
  inactiveFlag        Boolean               @default(false)
  adminClass          AdminType             @default(normal)
  goodsInquiryComment GoodsInquiryComment[]
}

enum AdminType {
  super // 슈퍼계정
  full // 개인정보 접근가능 계정
  normal // 일반계정
}

// 문의하기 주체
enum InquiryType {
  seller // 판매자
  broadcaster // 방송인
}

// 문의하기 테이블
model Inquiry {
  id          Int         @id @default(autoincrement())
  name        String // 문의자 명
  email       String // 문의자 이메일
  content     String      @db.LongText // 내용
  phoneNumber String? // 문의자 휴대전화
  brandName   String? // 문의자 브랜드 이름
  homepage    String? // 문의자 홈페이지
  type        InquiryType
  createDate  DateTime    @default(now())
  readFlag    Boolean?    @default(false) // 관리자 처리 여부 
}

// 휴면 계정 테이블
model InactiveBroadcaster {
  id                                Int                                 @id @default(autoincrement())
  email                             String?                             @unique // 방송인 이메일(가입시 사용)
  userName                          String?                             @db.VarChar(20) // 유저의 실명
  userNickname                      String?                             @db.VarChar(20) // 유저의 활동명
  overlayUrl                        String?                             @unique // 라이브커머스 오버레이 URL 
  createDate                        DateTime                            @default(now())
  password                          String? // 비밀번호
  avatar                            String?
  inactiveFlag                      Boolean                             @default(true)
  deleteFlag                        Boolean
  agreementFlag                     Boolean
  InactiveBroadcasterSocialAccount  InactiveBroadcasterSocialAccount[]
  InactiveBroadcasterContacts       InactiveBroadcasterContacts[]
  InactiveBroadcasterAddress        InactiveBroadcasterAddress[]
  InactiveBroadcasterChannel        InactiveBroadcasterChannel[]
  InactiveBroadcasterSettlementInfo InactiveBroadcasterSettlementInfo[]
}

model InactiveSeller {
  id                                 Int                                  @id @default(autoincrement())
  email                              String                               @unique
  name                               String?
  password                           String?
  avatar                             String?
  inactiveFlag                       Boolean                              @default(true)
  agreementFlag                      Boolean
  InactiveSellerSocialAccount        InactiveSellerSocialAccount[]
  InactiveSellerBusinessRegistration InactiveSellerBusinessRegistration[]
  InactiveSellerContacts             InactiveSellerContacts[]
  InactiveSellerSettlementAccount    InactiveSellerSettlementAccount[]
}

// 방송인 소셜로그인 계정
model InactiveBroadcasterSocialAccount {
  serviceId     String              @id // 인증 결과로 해당 서비스에서 받은 고유 식별자
  provider      String // 'google' | 'kakao' | 'naver'
  name          String
  registDate    DateTime            @default(now())
  profileImage  String?
  accessToken   String?
  refreshToken  String?
  broadcasterId Int
  broadcaster   InactiveBroadcaster @relation(fields: [broadcasterId], references: [id], onDelete: Cascade)

  @@index([broadcasterId], name: "broadcasterId")
}

model InactiveSellerSocialAccount {
  serviceId    String         @id // 인증 결과로 해당 서비스에서 받은 고유 식별자
  provider     String // 'google' | 'kakao' | 'naver'
  name         String
  registDate   DateTime       @default(now())
  profileImage String?
  accessToken  String?
  refreshToken String?
  sellerId     Int
  seller       InactiveSeller @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([sellerId], name: "sellerId")
}

// 방송인 선물/샘플 수령 주소 정보
model InactiveBroadcasterAddress {
  id            Int      @id @default(autoincrement())
  address       String // 주소 (도로명)
  detailAddress String // 주소 상세
  postalCode    String // 우편 번호
  createDate    DateTime @default(now())

  broadcasterId       Int?                 @unique
  inactiveBroadcaster InactiveBroadcaster? @relation(fields: [broadcasterId], references: [id], onDelete: Cascade)
}

// 방송인 활동 플랫폼 채널정보(url)
model InactiveBroadcasterChannel {
  id                  Int                 @id @default(autoincrement())
  url                 String // 채널 url (아프리카, 트위치, 유투브, 인스타그램 ...)
  createDate          DateTime            @default(now())
  inactiveBroadcaster InactiveBroadcaster @relation(fields: [broadcasterId], references: [id], onDelete: Cascade)
  broadcasterId       Int
}

// 방송인 연락처 정보
model InactiveBroadcasterContacts {
  id          Int      @id @default(autoincrement())
  name        String   @default("")
  email       String   @default("")
  phoneNumber String   @default("")
  isDefault   Boolean  @default(false)
  createDate  DateTime @default(now())

  broadcasterId       Int?
  inactiveBroadcaster InactiveBroadcaster? @relation(fields: [broadcasterId], references: [id], onDelete: Cascade)
}

// 방송인 정산을 위한 계약자, 계좌정보(방송인 정산등록정보)
model InactiveBroadcasterSettlementInfo {
  id                    Int                                            @id @default(autoincrement())
  type                  TaxationType                                   @default(naturalPerson) // 과세유형 (개인 | 개인사업자) 
  name                  String // 개인 이름 혹은 개인사업자명
  idCardNumber          String // 암호화된 주민등록번호
  phoneNumber           String // 암호화된 휴대전화번호
  bank                  String // 은행이름
  accountNumber         String // 계좌번호
  accountHolder         String // 예금주
  idCardImageName       String // 주민등록번호 파일 s3에 저장된 파일명(s3)
  accountImageName      String // 통장사본 파일 s3에 저장된 파일명(s3)
  taxManageAgreement    Boolean                                        @default(false) //세무처리 관련 동의(개인사업자에만 해당)
  personalInfoAgreement Boolean                                        @default(false) //정산정보 등록에 따른 개인정보 수집 및 이용동의(필수)
  settlementAgreement   Boolean? //정산등록 신청서 제출에 대한 확인여부(과세유형이 개인사업자 경우만 필수)
  inactiveBroadcaster   InactiveBroadcaster                            @relation(fields: [broadcasterId], references: [id], onDelete: Cascade)
  broadcasterId         Int                                            @unique
  confirmation          InactiveBroadcasterSettlementInfoConfirmation?
}

// 방송인 정산 등록 정보 검수여부
model InactiveBroadcasterSettlementInfoConfirmation {
  id               Int                               @id @default(autoincrement())
  status           BusinessRegistrationStatus        @default(waiting)
  rejectionReason  String?                           @db.Text // 반려사유 - 관리자가 입력
  settlementInfo   InactiveBroadcasterSettlementInfo @relation(fields: [settlementInfoId], references: [id], onDelete: Cascade)
  settlementInfoId Int                               @unique
}

// 사업자등록정보
model InactiveSellerBusinessRegistration {
  id       Int @id @default(autoincrement()) // 사업자 등록증 DB 고유 번호
  sellerId Int

  companyName                              String // 상호명
  businessRegistrationNumber               String // 사업자등록증 등록번호
  representativeName                       String // 대표자명
  businessType                             String // 업태
  businessItem                             String // 종목
  businessAddress                          String // 사업장 주소
  taxInvoiceMail                           String // 세금계산서 전용 이메일
  businessRegistrationImageName            String // 사업자등록증 이미지 파일명
  mailOrderSalesNumber                     String // 통신판매업 신고번호 
  mailOrderSalesImageName                  String // 통신판매업 이미지 파일명
  InactiveBusinessRegistrationConfirmation InactiveBusinessRegistrationConfirmation?
  InactiveSeller                           InactiveSeller                            @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@index(name: "BusinessRegistrationIndex", fields: [id])
}

// 판매자가 등록한 라이브 쇼핑 담당자 연락처들
model InactiveSellerContacts {
  id          Int            @id @default(autoincrement())
  sellerId    Int // 판매자 아이디
  email       String         @default("") //등���한 이메일
  phoneNumber String         @default("") // 등록한 전화번호
  isDefault   Boolean        @default(false) // 기본 연락처 설정 여부
  seller      InactiveSeller @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  createDate  DateTime       @default(now())
}

// 판매자 정산 계좌 정보
model InactiveSellerSettlementAccount {
  id                         Int            @id @default(autoincrement())
  sellerId                   Int
  bank                       String
  number                     String
  name                       String
  settlementAccountImageName String
  seller                     InactiveSeller @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([id], name: "SellerSettlementAccountIndex")
}

// 사업자등록정보 검수정보
model InactiveBusinessRegistrationConfirmation {
  id                                   Int                                @id @default(autoincrement())
  status                               BusinessRegistrationStatus         @default(waiting) // 검수 상태
  rejectionReason                      String?                            @db.Text // 반려사유 - 관리자가 입력
  InactiveSellerBusinessRegistrationId Int                                @unique
  SellerBusinessRegistration           InactiveSellerBusinessRegistration @relation(fields: [InactiveSellerBusinessRegistrationId], references: [id])
}

// 정책 분류
enum PolicyCategory {
  termsOfService // 이용약관
  privacy // 개인정보처리방침
}

// 정책 대상
enum PolicyTarget {
  seller // 판매자
  broadcaster // 방송인
  all // 전체
}

// 정책(개인정보처리방침, 이용약관) 테이블
model Policy {
  id              Int            @id @default(autoincrement())
  category        PolicyCategory // 정책 분야 : 이용약관 | 개인정보처리방침
  targetUser      PolicyTarget // 적용 대상 : 판매자 | 방송인 | 전체
  createDate      DateTime       @default(now())
  updateDate      DateTime       @default(now()) @updatedAt
  enforcementDate DateTime? // 시행일
  version         String // 버전
  publicFlag      Boolean        @default(false) // 공개여부
  content         String         @db.LongText // 내용
}

// 개인정보접근기록
model PrivacyApproachHistory {
  id         Int                              @id @default(autoincrement())
  adminEmail String // 접근한 관리자 이메일
  ip         String // 접근한 ip주소
  infoType   PrivacyApproachHistoryInfoType
  actionType PrivacyApproachHistoryActionType
  reason     String? // 다운로드 사유
  createDate DateTime                         @default(now())
}

enum PrivacyApproachHistoryInfoType {
  broadcasterSettlementAccount // 방송인 계좌
  broadcasterIdCard // 방송인 주민등록증
  sellerSettlementAccount // 판매자 계좌
  sellerBusinessRegistration // 판매자 사업자 등록증
  sellerMailOrderCertificate // 판매자 통신판매신고증
}

enum PrivacyApproachHistoryActionType {
  download // 다운로드
  view // 조회
}

model AdminClassChangeHistory {
  id                 Int       @id @default(autoincrement())
  adminEmail         String // 접근한 관리자 이메일
  targetEmail        String // 대상 메일 
  originalAdminClass AdminType
  newAdminClass      AdminType
  createDate         DateTime  @default(now())
}

// 크크쇼 메인페이지 데이터
model KkshowMain {
  id              Int  @id @default(autoincrement())
  carousel        Json // 메인캐러셀 영역 아이템[]
  trailer         Json // 라이브예고 영역 
  bestLive        Json // 베스트라이브 영역 아이템[]
  bestBroadcaster Json // 베스트방송인 영역 아이템[]
}

// 크크쇼 쇼핑탭 데이터
model KkshowShoppingTab {
  id              Int  @id @default(autoincrement())
  carousel        Json // 쇼핑탭 캐러셀 영역 아이템[]
  goodsOfTheWeek  Json // 쇼핑탭 금주의 상품 영역 아이템[]
  newLineUp       Json // 쇼핑탭 신상 라인업 영역 아이템[]
  popularGoods    Json // 쇼핑탭 많이 찾는 상품 영역 아이템[]
  banner          Json // 쇼핑탭 알림 배너
  recommendations Json // 쇼핑탭 크크마켓 추천상품 영역 아이템[]
  reviews         Json // 쇼핑탭 생생후기 영역 아이템[]
  keywords        Json // 쇼핑탭 테마별 키워드 영역 아이템[]
}

enum UserType {
  seller // 판매자
  broadcaster // 방송인
}

// 이용안내
model Manual {
  id                 Int      @id @default(autoincrement())
  target             UserType // seller | broadcaster
  mainCategory       String // 해당 항목이 속하는 대분류 - 마이페이지/페이지 구분과 유사 (예: 상품, 라이브커머스)
  title              String // 이용안내 제목(예: 상품 등록, 라이브커머스 등록)
  description        String // 해당 항목에 대한 짧은 설명 (예: 크크쇼에 상품을 등록하는 방법입니다.)
  order              Int // 항목 내에서 이용안내 표시될 순서
  contents           String   @db.Text // 이용안내 내용
  linkPageRouterPath String? // 연결될 마이페이지 routerPath (MypageLink의 href)
  createDate         DateTime @default(now())
  updateDate         DateTime @default(now()) @updatedAt
}

enum PaperType {
  settlementAccount // 계좌
  businessRegistration //사업자등록증
  mailOrder // 통신판매업증
}

model ConfirmHistory {
  id                           Int                         @id @default(autoincrement())
  sellerBusinessRegistrationId Int?
  sellerSettlementAccountId    Int?
  broadcasterSettlementInfoId  Int?
  type                         PaperType // 서류 종류
  status                       BusinessRegistrationStatus // 검수상태
  createDate                   DateTime                    @default(now())
  sellerSettlementAccount      SellerSettlementAccount?    @relation(fields: [sellerSettlementAccountId], references: [id])
  sellerBusinessRegistration   SellerBusinessRegistration? @relation(fields: [sellerBusinessRegistrationId], references: [id])
  broadcasterSettlementInfo    BroadcasterSettlementInfo?  @relation(fields: [broadcasterSettlementInfoId], references: [id])
}

// *********************************************************************************
// 소비자
// *********************************************************************************

model Customer {
  id                     Int                          @id @default(autoincrement()) // 소비자고유번호
  name                   String? // 이름
  password               String? // 비밀번호
  email                  String?                      @unique // 이메일
  nickname               String? // 닉네임
  phone                  String? // 연락처
  createDate             DateTime                     @default(now()) // 생성일
  gender                 Gender?                      @default(unknown) // 성별(male, female)
  birthDate              DateTime? // 생년월일
  agreementFlag          Boolean                      @default(false) // 개인정보    이용동의여부
  inactiveFlag           Boolean                      @default(false)
  socialAccounts         CustomerSocialAccount[] // 연결된 소셜로그인 계정
  addresses              CustomerAddress[] // 주소록
  notificationSetting    CustomerNotificationSetting? // 알림설정
  mileage                CustomerMileage? // 보유 적립금
  mileageLogs            CustomerMileageLog[]
  orders                 Order[] // 주문
  coupons                CustomerCoupon[] // 발급받은 쿠폰
  cartItems              CartItem[] // 장바구니에 넣은 상품
  goodsReview            GoodsReview[]                @relation("WrittenReviews") // 작성한 리뷰
  likedReviews           GoodsReview[]                @relation("LikedReviews") // 좋아요 누른 리뷰
  goodsReviewComments    GoodsReviewComment[] // 소비자가 작성한 댓글
  goodsInquiries         GoodsInquiry[]
  followingLiveShoppings LiveShopping[] // 팔로우하는 라이브쇼핑
  followingBroadcasters  CustomerFollowBroadcaster[] // 팔로우하는 방송인
}

enum Gender {
  male // 남
  female // 여
  unknown // 선택 안함
}

// 소비자-방송인팔로우  https://www.prisma.io/docs/concepts/components/prisma-schema/relations/many-to-many-relations#explicit-many-to-many-relations
model CustomerFollowBroadcaster {
  customerId    Int
  customer      Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  broadcasterId Int
  broadcaster   Broadcaster @relation(fields: [broadcasterId], references: [id], onDelete: Cascade)
  createDate    DateTime    @default(now()) // 팔로우시작 날짜

  @@id([customerId, broadcasterId])
}

// 소비자 소셜로그인 계정정보
model CustomerSocialAccount {
  serviceId    String   @id // 인증 결과로 해당 서비스에서 받은 고유 식별자
  provider     String // 'google' | 'kakao' | 'naver'
  name         String // 이름
  registDate   DateTime @default(now()) // 생성일
  profileImage String? // 프로필사진
  accessToken  String? // 액세스토큰
  refreshToken String? // 리프레시토큰
  customerId   Int // 소비자 고유번호
  customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId], name: "customerId")
}

// 소비자 주소록
model CustomerAddress {
  id            Int      @id @default(autoincrement()) // 주소록고유번호
  title         String // 주소록 별칭
  recipient     String? // 수령인
  address       String? // 주소 (도로명)
  detailAddress String? // 주소 상세
  postalCode    String? // 우편 번호
  isDefault     Boolean  @default(false) // 기본주소지 여부
  memo          String? // 배송메모
  phone         String? // 수령인 연락처
  createDate    DateTime @default(now()) // 생성일
  customerId    Int // 소비자 고유번호
  customer      Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

// 소비자 알림설정
model CustomerNotificationSetting {
  id            Int     @id @default(autoincrement()) // 소비자 알림설정 고유번호
  orderDelivery Boolean @default(true) // 주문,배송 알림여부
  review        Boolean @default(true) // 리뷰 알림여부
  restock       Boolean @default(true) // 재입고 알림여부 - 재입고 기능이 있나???
  advertisement Boolean @default(true) // 광고성 알림여부

  customerId Int      @unique // 소비자 고유번호
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

// 소비자 보유 적립금
model CustomerMileage {
  id         Int      @id @default(autoincrement()) // 소비자 보유 적립금 고유번호
  customerId Int      @unique // 소비자 고유번호
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  mileage    Int      @default(0) // 보유적립금
}

// 소비자 적립금 변동 내역
model CustomerMileageLog {
  id         Int               @id @default(autoincrement()) // 소비자적립금 변동내역 고유번호
  customerId Int // 소비자 고유번호
  customer   Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  amount     Int // 변동된 적립금 양
  actionType MileageActionType // 적립금 변동 유형(사용 | 적립)
  createDate DateTime          @default(now()) // 생성일
  reason     String // 변동사유(주문, 리뷰, 사용취소, 쿠폰 등등)
  orderId    Int? // 주문ID (주문으로 인해 적립금 변동내역 생성된 경우. 적립금 사용금액 조회위해 연결)
  order      Order?            @relation(fields: [orderId], references: [id], onDelete: SetNull)
  reviewId   Int? // 리뷰ID (리뷰로 인해 적립금 변동내역 생성된 경우.. 참조할 필요가 있나??)
}

// [enum]적립금 사용 유형
enum MileageActionType {
  consume // 사용
  earn // 적립
}

// [enum] 쿠폰, 코드 할인적용 대상
enum DiscountApplyField {
  goods // 상품
  shipping // 배송비
}

// [enum] 적용 유형
enum DiscountApplyType {
  selectedGoods // 연결된 상품에만 적용가능
  exceptSelectedGoods // 연결된 상품 제외하고 적용가능
  allGoods // 모든 상품에 적용가능
}

// ****************
// 쿠폰
// ****************
model Coupon {
  id                   Int                @id @default(autoincrement()) // 쿠폰 고유번호
  amount               Int                @default(0) // 할인금액 혹은 할인율
  unit                 AmountUnit         @default(P) // 할인에 적용되는 단위 (퍼센트 P, 원 W)
  maxDiscountAmountWon Int? // 최대할인금액(원단위)
  minOrderAmountWon    Int                @default(0) // 할인코드 적용 가능한 최소주문금액
  name                 String // 쿠폰명
  createDate           DateTime           @default(now()) // 생성일시
  startDate            DateTime // 유효시간 시작
  endDate              DateTime? // 유효기간 끝
  applyField           DiscountApplyField @default(goods) // 쿠폰할인 적용 범위 - 상품 | 배송비
  applyType            DiscountApplyType  @default(allGoods) // 쿠폰적용가능 유형 - 모든상품에 적용가능 | 연결된상품에만 적용가능 | 연결된상품 제외하고 적용가능
  memo                 String? // 쿠폰 설명
  concurrentFlag       Boolean            @default(false) // 다른쿠폰과 동시에 사용 가능여부
  goods                Goods[] // 연결된 상품
  customerCoupons      CustomerCoupon[] // 해당 쿠폰 발급받은 사용자 정보
}

// 소비자가 발급받은 쿠폰
model CustomerCoupon {
  id         Int                 @id @default(autoincrement()) // 소비자 발급쿠폰 고유번호
  couponId   Int
  coupon     Coupon              @relation(fields: [couponId], references: [id])
  customerId Int
  customer   Customer            @relation(fields: [customerId], references: [id])
  issueDate  DateTime            @default(now()) // 발급일
  status     CouponStatus        @default(notUsed) // 쿠폰상태
  logs       CustomerCouponLog[] // 쿠폰사용내역
}

enum CouponStatus {
  expired // 기간 만료
  notUsed // 미사용
  used // 사용
}

// 소비자의 쿠폰 발급/사용/복구 내역
model CustomerCouponLog {
  id               Int            @id @default(autoincrement()) // 쿠폰 사용내역 고유번호
  customerCouponId Int
  customerCoupon   CustomerCoupon @relation(fields: [customerCouponId], references: [id], onDelete: Cascade)
  type             CouponLogType  @default(issue) // 쿠폰내역타입
  createDate       DateTime       @default(now()) // 쿠폰사용내역 생성일
}

enum CouponLogType {
  issue // 발급
  use // 사용
  restore // 복구
}

// *****************
// 장바구니
// *****************
// 장바구니 상품
model CartItem {
  id                   Int              @id @default(autoincrement()) // 장바구니 상품 고유번호
  createDate           DateTime         @default(now())
  customerId           Int? // 비로그인 상태로 장바구니에 담은것도 디비에 저장해야 하나? 쿠키에만 저장하면 되나??
  customer             Customer?        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tempUserId           String? // 비로그인한 유저 식별값(세션id?)
  goodsId              Int?
  goods                Goods?           @relation(fields: [goodsId], references: [id], onDelete: SetNull)
  options              CartItemOption[] // 선택된 장바구니 상품 옵션
  support              CartItemSupport? // 연결된 후원정보
  shippingCost         Decimal          @default("0.00") @db.Decimal(10, 2) // 장바구니 담았을 당시 이 장바구니 상품에 포함된  배송비
  shippingCostIncluded Boolean          @default(false) // 이 장바구니 상품에 동일 판매자의 배송비가 포함되었는지 여부
  shippingGroupId      Int // 연결된 배송정책 id
  shippingGroup        ShippingGroup    @relation(fields: [shippingGroupId], references: [id]) // 연결된 배송정책
}

// 장바구니 상품옵션
model CartItemOption {
  id            Int      @id @default(autoincrement()) // 장바구니 상품 옵션 고유번호
  cartItem      CartItem @relation(fields: [cartItemId], references: [id], onDelete: Cascade) // 옵션이 연결된 장바구니 상품
  cartItemId    Int // 옵션이 연결된 장바구니 상품 고유번호
  name          String? // 장바구니에 담았을 당시 옵션명
  value         String? // 장바구니에 담았을 당시 옵션값
  quantity      Int // 옵션 선택 수량(개수)
  normalPrice   Decimal  @db.Decimal(10, 2) // 장바구니에 담았을 당시 소비자가 (미할인가) => Int 아닌 Decimal인 이유: 상품옵션GoodsOption 테이블 만들때 가격Decimal로 설정해서(퍼스트몰 테이블 스키마 참고하였음)
  discountPrice Decimal  @db.Decimal(10, 2) // 장바구니에 담았을 당시 판매가 (할인가)
  weight        Float? //장바구니에 담았을 당시 옵션 개당 무게 (단위 kg)
}

// 장바구니 상품 후원
model CartItemSupport {
  id            Int          @id @default(autoincrement()) // 장바구니 상품 후원 고유번호
  message       String? // 후원메시지
  nickname      String? // 후원한 사람 닉네임(필요없을거 같기는 한데 비회원의 경우 필요할거같아서 일단 넣어둠)
  broadcasterId Int? // 후원 대상 방송인 고유번호
  broadcaster   Broadcaster? @relation(fields: [broadcasterId], references: [id], onDelete: SetNull) // 후원 대상 방송인
  cartItemId    Int?         @unique // 후원이 연결된 장바구니 상품 고유번호
  cartItem      CartItem?    @relation(fields: [cartItemId], references: [id], onDelete: Cascade) // 후원이 연결된 장바구니 상품
}

// *****************
// 리뷰
// *****************
// 리뷰
model GoodsReview {
  id             Int                  @id @default(autoincrement()) // 리뷰고유번호
  content        String               @db.Text // 리뷰내용
  rating         Float // 별점
  createDate     DateTime //생성일
  writerId       Int // 리뷰 작성한 소비자 고유번호
  writer         Customer             @relation("WrittenReviews", fields: [writerId], references: [id], onDelete: Cascade) // 리뷰작성자
  likedCustomers Customer[]           @relation("LikedReviews") // 해당리뷰 좋아요 누른 소비자들
  goodsId        Int? // 리뷰 대상 상품 고유번호
  goods          Goods?               @relation(fields: [goodsId], references: [id], onDelete: SetNull) // 리뷰 대상 상품
  images         GoodsReviewImage[] // 해당리뷰에 포함된 이미지
  comments       GoodsReviewComment[] // 해당 리뷰에 달린 댓글
}

// 상품리뷰이미지
model GoodsReviewImage {
  id            Int         @id @default(autoincrement()) // 리뷰이미지 고유번호
  imageUrl      String // 이미지 url
  goodsReviewId Int // 이미지가 포함된 리뷰 고유번호
  GoodsReview   GoodsReview @relation(fields: [goodsReviewId], references: [id], onDelete: Cascade) // 이미지가 포함된 리뷰
}

// 상품리뷰 댓글
model GoodsReviewComment {
  id                  Int         @id @default(autoincrement()) // 상품리뷰 댓글 고유번호
  content             String // 내용
  createDate          DateTime // 생성일
  reviewId            Int // 댓글달린 리뷰 고유번호
  review              GoodsReview @relation(fields: [reviewId], references: [id], onDelete: Cascade) // 댓글달린리뷰
  customerId          Int? // 댓글 작성한 소비자 고유번호
  customer            Customer?   @relation(fields: [customerId], references: [id], onDelete: SetNull) // 댓글작성한 소비자
  writtenBySellerFlag Boolean     @default(false) // 댓글이 판매자에 의해 작성된 경우 해당 컬럼값은 true이고 연결된 소비자는 없다
  sellerId            Int? // 댓글 작성한 판매자 고유번호(판매자에 의해 댓글이 작성된 경우)
  seller              Seller?     @relation(fields: [sellerId], references: [id], onDelete: SetNull) // 댓글작성한 판매자(판매자에 의해 댓글이 작성된 경우)
}

// *****************
// 상품문의
// *****************
// 상품문의
model GoodsInquiry {
  id         Int      @id @default(autoincrement()) // 상품문의고유번호
  content    String   @db.Text // 상품문의내용
  createDate DateTime //생성일

  writerId Int // 상품문의 작성한 소비자 고유번호
  // 상품문의작성자
  writer   Customer @relation(fields: [writerId], references: [id], onDelete: Cascade)

  goodsId  Int // 상품문의 대상 상품 고유번호
  // 상품문의 대상 상품
  goods    Goods                 @relation(fields: [goodsId], references: [id], onDelete: Cascade)
  comments GoodsInquiryComment[] // 상품문의에 달린 답변
}

// 상품문의 답변
model GoodsInquiryComment {
  id                  Int          @id @default(autoincrement()) // 상품문의답변 고유번호
  content             String // 상품문의답변 내용
  createDate          DateTime // 상품문의답변 생성일
  goodsInquiryId      Int // 상품문의답변달린 문의 고유번호
  goodsInquiry        GoodsInquiry @relation(fields: [goodsInquiryId], references: [id], onDelete: Cascade) // 상품문의답변 달린 문의
  writtenBySellerFlag Boolean      @default(false) // 답변이 판매자에 의해 작성된 경우 해당 컬럼값은 true이고 연결된 관리자는 없다

  adminId Int? // 답변 작성한 관리자 고유번호(관리자에 의해 답변이 작성된 경우)
  // 답변 작성한 관리자(관리자에 의해 답변이 작성된 경우)
  admin   Administrator? @relation(fields: [adminId], references: [id], onDelete: SetNull)

  sellerId Int? // 답변 작성한 판매자 고유번호(판매자에 의해 답변이 작성된 경우)
  // 답변 작성한 판매자(판매자에 의해 답변이 작성된 경우)
  seller   Seller? @relation(fields: [sellerId], references: [id], onDelete: SetNull)
}

// **************************************************************************
// 주문
// **************************************************************************
model Order {
  id                         Int                          @id @default(autoincrement()) // 주문 고유번호
  orderCode                  String?                      @unique // 주문번호  => 주문자(회원이든 비회원이든)에게 노출될 고유번호. 주문일시+기타정보?? 조합해서 고유값 만들면 될듯
  //주문고유번호id 가 있음에도 orderCode 컬럼을 만든 이유는 사용자에게 노출되어 주문 조회시 사용할 주문번호가 1,2 이러면 이상할거같아서...
  customerId                 Int? // 소비자 고유번호
  // 연결된 소비자 삭제되는 경우 => 주문데이터는 유지, customerId는 null 이 됨
  customer                   Customer?                    @relation(fields: [customerId], references: [id], onDelete: SetNull)
  payment                    OrderPayment? // 주문결제정보
  step                       OrderProcessStep             @default(orderReceived) // 주문상태
  createDate                 DateTime // 주문생성일시
  orderPrice                 Int // 주문금액 = 실제 주문 상품/상품옵션 의 금액 합
  paymentPrice               Int // 결제금액 = 할인(쿠폰,할인코드,마일리지 적용)이후 사용자가 실제 결제한 금액
  recipientName              String // 받는사람명
  recipientPhone             String // 받는사람 연락처
  recipientEmail             String // 받는사람 이메일
  recipientAddress           String // 받는사람 주소(배송지) 도로명
  recipientDetailAddress     String // 받는사람 주소(배송지) 주소 상세
  recipientPostalCode        String // 받는사람 주소(배송지) 우편 번호
  ordererName                String // 주문자명
  ordererPhone               String // 주문자 연락처
  ordererEmail               String // 주문자 이메일
  memo                       String // 배송메시지
  nonMemberOrderFlag         Boolean                      @default(false) // 비회원 주문 여부
  nonMemberOrderPassword     String? // 비회원주문시 입력받는 비밀번호 - 비회원이 주문조회,취소시 사용할예정
  giftFlag                   Boolean                      @default(false) // 선물주문 여부
  supportOrderIncludeFlag    Boolean                      @default(false) // 후원상품 포함여부
  bundleFlag                 Boolean                      @default(false) // 묶음배송여부
  purchaseConfirmationDate   DateTime? // 구매확정일자
  cashReceipts               String? // 현금영수증번호
  mileageLogs                CustomerMileageLog[] // 사용 & 적립 마일리지 내역
  orderItems                 OrderItem[] // 주문에 연결된 주문상품들
  refunds                    Refund[] // 주문에 연결된 환불정보
  returns                    Return[] // 주문에 연결된 반품정보
  exports                    Export[] // 주문에 연결된 출고정보
  exchanges                  Exchange[]
  orderCancellations         OrderCancellation[] // 주문에 연결된 주무취소정보
  broadcasterSettlementItems BroadcasterSettlementItems[]
  sellerSettlementItems      SellerSettlementItems[]

  @@index([orderCode])
}

// [enum] 주문처리상태
// 퍼스트몰 테이블 사용하고있는 기존 코드 재활용 쉽게 하기 위해
// 퍼스트몰 주문상태 코드에 대응하는 값으로 만들었음
enum OrderProcessStep {
  orderReceived // 주문접수, 15
  paymentConfirmed // 결제확인, 25
  goodsReady // 상품준비, 35
  partialExportReady // 부분출고준비, 40
  exportReady // 출고준비, 45
  partialExportDone // 부분출고완료, 50
  exportDone // 출고완료, 55
  partialShipping // 부분배송중, 60
  shipping // 배송중, 65
  partialShippingDone // 부분배송완료, 70
  shippingDone // 배송완료, 75
  paymentCanceled // 결제취소, 85
  orderInvalidated // 주문무효, 95
  paymentFailed // 결제실패, 99
}

// 주문결제정보 - 기타 전자결제관련 필요한 데이터 저장
model OrderPayment {
  id              Int           @id @default(autoincrement()) // 주문결제정보 고유번호
  method          PaymentMethod // 결제수단
  orderId         Int?          @unique
  // 연결된 주문데이터가 삭제되는 경우 결제정보 데이터는 유지되어야 하나??
  order           Order?        @relation(fields: [orderId], references: [id], onDelete: SetNull)
  paymentKey      String // PG사(토스페이먼츠or...)에서 제공하는 결제 고유ID값
  depositDate     DateTime? // 입금일시
  depositor       String? // 입금자명
  depositDoneFlag Boolean       @default(false) // 입금완료여부
  account         String? // 주문자가 결제한 금액이 입금될 계좌정보 
}

// [enum] 결제수단
enum PaymentMethod {
  card // 신용카드
  bank // 무통장입금
  account // 실시간 계좌이체
}

// ****************
// 주문상품
// ****************
// 주문상품
model OrderItem {
  id                     Int                     @id @default(autoincrement()) // 주문상품 고유번호
  orderId                Int // 연결된 주문 고유번호
  order                  Order                   @relation(fields: [orderId], references: [id], onDelete: Cascade) // 연결된 주문
  goodsId                Int? // 연결된 상품 고유번호
  goods                  Goods?                  @relation(fields: [goodsId], references: [id], onDelete: SetNull) // 연결된 상품
  channel                SellType                @default(normal) // 판매유형(주문경로) - 주문테이블이 아닌 주문상품 테이블에 이 컬럼이 존재하는 이유 : 하나의 주문에 여러 경로로 선택된 상품이 포함될 수 있어서 상품별로 주문경로 저장함
  options                OrderItemOption[] // 주문상품 옵션들
  support                OrderItemSupport? // 주문상품에 연결된 후원정보
  refundItems            RefundItem[] // 환불상품
  returnItems            ReturnItem[] // 반품상품
  exportItems            ExportItem[] // 출고상품
  orderCancellationItems OrderCancellationItem[] // 주문취소상품
  shippingCost           Decimal                 @default("0.00") @db.Decimal(10, 2) // 주문당시 이 주문 상품에 포함된  배송비
  shippingCostIncluded   Boolean                 @default(false) // 이 주문 상품에 동일 판매자의 배송비가 포함되었는지 여부
  shippingGroupId        Int // 연결된 배송정책 id
  shippingGroup          ShippingGroup           @relation(fields: [shippingGroupId], references: [id]) // 연결된 배송정책
  exchangeItems          ExchangeItem[] // 교환상품
}

// 주문상품옵션
model OrderItemOption {
  id                     Int                     @id @default(autoincrement()) // 주문 상품 옵션 고유번호
  orderItemId            Int // 옵션이 연결된 주문 상품 고유번호
  orderItem              OrderItem               @relation(fields: [orderItemId], references: [id], onDelete: Cascade) // 옵션이 연결된 주문 상품
  name                   String? // 주문했을 당시 옵션명
  value                  String? // 주문했을 당시 옵션값
  quantity               Int // 옵션 선택 수량(개수)
  normalPrice            Decimal                 @db.Decimal(10, 2) // 주문했을 당시 소비자가 (미할인가) => Int 아닌 Decimal인 이유: 상품옵션GoodsOption 테이블 만들때 가격Decimal로 설정해서(퍼스트몰 테이블 스키마 참고하였음)
  discountPrice          Decimal                 @db.Decimal(10, 2) // 주문했을 당시 판매가 (할인가)
  weight                 Float? //주문했을 당시 옵션 개당 무게 (단위 kg)
  step                   OrderProcessStep        @default(orderReceived) // 주문상품의 처리상태(주문의 처리상태와는 별도임, 하나의 주문이지만 일부 상품의 특정 옵션만 먼저 발송되거나 취소될 수 있으므로..)
  refundItems            RefundItem[] // 환불상품
  returnItems            ReturnItem[] // 반품상품
  exportItems            ExportItem[] // 출고상품
  orderCancellationItems OrderCancellationItem[] // 주문취소상품
  exchangeItems          ExchangeItem[] // 교환상품
}

// 주문상품후원
model OrderItemSupport {
  id            Int          @id @default(autoincrement()) // 주문 상품 후원 고유번호
  message       String? // 후원메시지
  nickname      String? // 후원한 사람 닉네임(필요없을거 같기는 한데 비회원의 경우 필요할거같아서 일단 넣어둠)
  broadcasterId Int? // 후원 대상 방송인 고유번호
  broadcaster   Broadcaster? @relation(fields: [broadcasterId], references: [id], onDelete: SetNull) // 후원 대상 방송인
  orderItemId   Int?         @unique // 후원이 연결된 주문 상품 고유번호
  orderItem     OrderItem?   @relation(fields: [orderItemId], references: [id], onDelete: Cascade) // 후원이 연결된 주문 상품
}

// ****************
// 환불
// ****************
// 환불
model Refund {
  id                  Int                 @id @default(autoincrement()) // 환불고유번호
  refundCode          String?             @unique //환불코드
  orderId             Int // 주문 고유번호
  order               Order               @relation(fields: [orderId], references: [id]) // 연결된 주문
  status              ProcessStatus       @default(requested) // 환불처리상태
  requestDate         DateTime            @default(now()) // 환불신청일시
  completeDate        DateTime? // 처리완료일시
  reason              String // 환불사유
  refundAccount       String? // 환불계좌번호
  refundAccountHolder String? // 환불계좌예금주명
  items               RefundItem[] // 환불상품들
  orderCancellation   OrderCancellation[] // 연결된 주문취소
  responsibility      String // 책임소재(판매자귀책? 구매자귀책?)
  totalRefundAmount   Int // 총 환불금액
  paymentKey          String? // 토스페이먼츠 결제건에 대한 고유키(OrderPayment에서 지불했을 때 저장되는 paymentKey와 동일)
  transactionKey      String? // 취소 거래건에 대한 고유키. (동일 paymentKey 가지는)결제건에 대해 승인거래와 취소거래 구분 

}

// [enum] 처리상태
enum ProcessStatus {
  requested // 요청됨(초기 상태, 담당자 확인전)
  processing // 처리진행중(담당자 확인 후 처리 중)
  complete // 처리완료
  canceled // 취소됨(거절됨 포함)
}

// 환불상품
model RefundItem {
  id                Int             @id @default(autoincrement()) // 환불상품 고유번호
  refundId          Int // 환불고유번호
  refund            Refund          @relation(fields: [refundId], references: [id], onDelete: Cascade) // 연결된 환불정보
  orderItemId       Int // 주문상품 고유번호
  orderItem         OrderItem       @relation(fields: [orderItemId], references: [id]) // 연결된 주문상품
  orderItemOptionId Int // 주문상품 옵션 고유번호
  orderItemOption   OrderItemOption @relation(fields: [orderItemOptionId], references: [id]) // 연결된주문상품옵션
  amount            Int // 개수
  status            ProcessStatus   @default(requested) // 환불처리상태
}

// ****************
// 반품
// ****************
// 반품
model Return {
  id             Int           @id @default(autoincrement()) // 반품고유번호
  returnCode     String?       @unique //반품코드
  orderId        Int // 주문 고유번호
  order          Order         @relation(fields: [orderId], references: [id]) // 연결된 주문
  status         ProcessStatus @default(requested) // 반품처리상태
  requestDate    DateTime      @default(now()) // 반품신청일시
  completeDate   DateTime? // 처리완료일시
  reason         String // 소비자의 반품사유
  rejectReason   String? // 반품요청이 거절된 이유
  returnAddress  String // 회수지 주소
  items          ReturnItem[] // 반품상품들
  responsibility String // 책임소재(판매자귀책? 구매자귀책?)
}

// 반품 상품
model ReturnItem {
  id                Int             @id @default(autoincrement()) // 반품상품 고유번호
  returnId          Int // 반품고유번호
  return            Return          @relation(fields: [returnId], references: [id], onDelete: Cascade) // 연결된 반품정보
  orderItemId       Int // 주문상품 고유번호
  orderItem         OrderItem       @relation(fields: [orderItemId], references: [id]) // 연결된 주문상품
  orderItemOptionId Int // 주문상품 옵션 고유번호
  orderItemOption   OrderItemOption @relation(fields: [orderItemOptionId], references: [id]) // 연결된주문상품옵션
  amount            Int // 개수
  status            ProcessStatus   @default(requested) // 반품처리상태
  getBackFlag       Boolean         @default(false) // 회수(수거) 여부
}

// ****************
// 교환
// ****************
// 교환상태 - 다른 요청 진행상태와 달리 상품수거를 포함.  교환출고 이후 진행상태는 해당 교환출고상태와 중복일거같아서 추가하지 않음
enum ExchangeProcessStatus {
  requested // 요청됨(초기 상태, 담당자 확인전)
  colledted // 교환 요청 상품 수거됨
  processing // 처리진행중 -> 연결된 교환출고가 없다면 교환출고대기를 의미함. 연결된 교환출고가 있다면 교환출고의 상태를 참조한다.
  complete // 처리완료
  canceled // 취소됨
}

// 교환 - 환불과 다른 진행상태를 가짐, 출고데이터를 참조한다
model Exchange {
  id             Int                   @id @default(autoincrement()) // 교환고유번호
  exchangeCode   String?               @unique //교환코드
  orderId        Int // 주문 고유번호
  order          Order                 @relation(fields: [orderId], references: [id]) // 연결된 주문
  status         ExchangeProcessStatus @default(requested) // 교환처리상태
  requestDate    DateTime              @default(now()) // 교환신청일시
  completeDate   DateTime? // 처리완료일시
  reason         String // 교환사유
  rejectReason   String? // 교환요청이 거절된 이유
  returnAddress  String // 회수지 주소
  responsibility String // 책임소재(판매자귀책? 구매자귀책?)
  exportId       Int?                  @unique // 교환 재출고시 연결된 출고
  export         Export?               @relation(fields: [exportId], references: [id], onDelete: SetNull) // 교환 재출고시 연결된 출고
  exchangeItems  ExchangeItem[] // 교환요청에 포함된 상품들
}

// 교환상품
model ExchangeItem {
  id                Int                   @id @default(autoincrement()) // 교환상품 고유번호
  exchangeId        Int // 교환고유번호
  exchange          Exchange              @relation(fields: [exchangeId], references: [id], onDelete: Cascade) // 연결된 교환정보
  orderItemId       Int // 주문상품 고유번호
  orderItem         OrderItem             @relation(fields: [orderItemId], references: [id]) // 연결된 주문상품
  orderItemOptionId Int // 주문상품 옵션 고유번호
  orderItemOption   OrderItemOption       @relation(fields: [orderItemOptionId], references: [id]) // 연결된주문상품옵션
  amount            Int // 개수
  status            ExchangeProcessStatus @default(requested) // 교환처리상태
  getBackFlag       Boolean               @default(false) // 회수(수거) 여부
}

// ****************
// 주문취소
// ****************
// 주문취소
model OrderCancellation {
  id             Int                     @id @default(autoincrement()) // 주문취소 고유번호
  cancelCode     String?                 @unique //주문취소코드
  orderId        Int
  order          Order                   @relation(fields: [orderId], references: [id]) // 연결된 주문
  status         ProcessStatus           @default(requested) // 주문취소 처리상태
  requestDate    DateTime                @default(now()) // 주문취소 신청일시
  completeDate   DateTime? // 처리완료일시
  reason         String? // 취소사유
  rejectReason   String? // 취소요청이 거절된 이유
  responsibility String // 책임소재(판매자귀책? 구매자귀책?)
  items          OrderCancellationItem[]

  refundId Int? // 해당 주문 취소로 처리된 환불정보
  refund   Refund? @relation(fields: [refundId], references: [id])
}

// 주문취소상품
model OrderCancellationItem {
  id                  Int               @id @default(autoincrement()) // 주문취소상품 고유번호
  orderCancellationId Int // 취소고유번호
  orderCancellation   OrderCancellation @relation(fields: [orderCancellationId], references: [id], onDelete: Cascade) // 연결된 주문취소정보
  orderItemId         Int // 주문상품 고유번호
  orderItem           OrderItem         @relation(fields: [orderItemId], references: [id]) // 연결된 주문상품
  orderItemOptionId   Int // 주문상품 옵션 고유번호
  orderItemOption     OrderItemOption   @relation(fields: [orderItemOptionId], references: [id]) // 연결된주문상품옵션
  amount              Int // 개수
  status              ProcessStatus     @default(requested) // 주문취소 처리상태
}

// ****************
// 출고
// ****************

// 출고진행상태
enum ExportProcessStatus {
  preparing // 출고준비중
  exportDone // 출고완료
  shipping // 배송중
  shippingDone // 배송완료
}

// 출고
model Export {
  id                         Int                          @id @default(autoincrement()) // 출고고유번호
  exportCode                 String?                      @unique // 출고코드
  orderId                    Int // 주문 고유번호
  order                      Order                        @relation(fields: [orderId], references: [id]) // 연결된 주문
  status                     ExportProcessStatus          @default(preparing) // 출고상태
  deliveryCompany            String // 택배사
  deliveryNumber             String // 운송장번호
  bundleExportCode           String? // 합포장출고코드(합포장인경우)
  exportDate                 DateTime //출고일시
  broadcasterSettlementItems BroadcasterSettlementItems[]
  sellerSettlementItems      SellerSettlementItems[]
  exchangeExportedFlag       Boolean                      @default(false) // 재배송(교환출고인지) 여부
  exchange                   Exchange? // 교환출고시 연결된 교환데이터
}

// 출고상품
model ExportItem {
  id                Int             @id @default(autoincrement()) // 출고상품 고유번호
  orderItemId       Int // 주문상품 고유번호
  orderItem         OrderItem       @relation(fields: [orderItemId], references: [id]) // 연결된 주문상품
  orderItemOptionId Int // 주문상품 옵션 고유번호
  orderItemOption   OrderItemOption @relation(fields: [orderItemOptionId], references: [id]) // 연결된주문상품옵션
  amount            Int // 개수
}

// ****************
// 상품 품목별 정보제공 - 전자상거래 등에서의 상품 등의 정보제공에 관한 고시
// '상품정보제공고시'가 무엇인가요? https://m.help.naver.com/support/contents/contentsView.help?contentsNo=8785&lang=ko
// ****************
// 상품 품목
model GoodsInformationSubject {
  id      Int     @id @default(autoincrement()) // 상품품목 고유번호
  subject String // 상품품목명 => 전자상거래 등에서의 상품 등의 정보제공에 관한 고시 Ⅲ. 상품 등의 정보의 내용 (1) 의류 (2) 구두/신발.... 에서 '의류', '구두/신발' 과 같은 품목명. 현재 대부분 상품은 '가공식품'에 해당할듯
  items   Json // 상품품목별 필요한 정보를 key로 하는 JSON object 형태로 저장 (예: 가공식품의 경우 {"제품명": "", 식품유형: "", 생산자및소재지: "", 유통기한: "", 포장단위별내용물용량: "", 원재료및함량: "", ...})
  goods   Goods[] // 상품품목에 해당하는 상품들
}

// 상품정보제공
model GoodsInformationNotice {
  id       Int   @id @default(autoincrement()) // 상품정보제공 고유번호
  contents Json // 상품의 품목에 맞는 GoodsInformationSubject.items의 값을 채운 JSON object 형태로 저장 (예: {"제품명":"닭강정", "식품유형":"가열양념육", "유통기한":"제조일로부터3일", ...})
  goodsId  Int   @unique
  goods    Goods @relation(fields: [goodsId], references: [id]) // 연결된 상품
}

// ****************
// 상품 카테고리
// ****************
model GoodsCategory {
  id                 Int             @id @default(autoincrement())
  categoryCode       String          @unique // 카테고리 코드
  name               String // 카테고리명
  mainCategoryFlag   Boolean         @default(false) // 대표카테고리인지 여부 (카테고리 트리의 잎 여부)
  parentCategoryId   Int?
  parentCategory     GoodsCategory?  @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id]) // 상위 부모 카테고리
  childrenCategories GoodsCategory[] @relation("CategoryHierarchy") // 하위 자식카테고리들
  goods              Goods[] // 이 카테고리에 해당하는 상품들
}
