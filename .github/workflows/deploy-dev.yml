on:
  push:
    branches: [dev]

name: Dev deploy to AWS ECS - "api"

jobs:
  Build:
    name: Build Job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      #  Install All Dependencies
      - name: Install dependencies
        uses: bahmutov/npm-install@v1 # install dependencies using cache

      # Generate Prisma Client
      - name: Primsa generate
        run: yarn nx run prisma-orm:prisma-generate

      #  Build API server
      - name: Build
        run: yarn affected:build --prod

      # Dockerize and Push to DockerHub
      - name: Dockerize
        run: yarn affected --target=dockerize-dev --args="--username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }} --tag=${{ github.sha }}"

  Deploy:
    name: Deploy Job
    runs-on: self-hosted
    needs: [Build, FindNeedToDeploy]
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      
      #  Install All Dependencies
      - name: Install dependencies
        uses: bahmutov/npm-install@v1 # install dependencies using cache

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROJECT_LC }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROJECT_LC }}
          aws-region: ap-northeast-2

      - name: Check api affected
        id: CheckApiAffected
        run: |
          API_AFFECTED = $(yarn affected:apps --plain --base HEAD~1 --head HEAD | grep -c api)
          if [API_AFFECTED -eq 1]
          then
            echo '::set-output name=API_AFFECTED::api'
          fi
      
      # - name: Check socket affected
      #   id: CheckSocketAffected
      #   run: |
      #     SOCKET_AFFECTED = $(yarn affected:apps --plain --base HEAD~1 --head HEAD | grep -c socket)
      #     if [SOCKET_AFFECTED -eq 1]
      #     then
      #       echo '::set-output name=SOCKET_AFFECTED::socket'
      #     fi

      - name: Fill in the new image ID in the Amazon ECS task definition API
        if: ${{ steps.CheckApiAffected.outputs.API_AFFECTED == 'api' }}
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: apps/api/task-definition-dev.json
          container-name: project-lc-api-dev
          image: ${{ secrets.DOCKER_USERNAME }}/project-lc-api-dev:${{ github.sha }}

      - name: Deploy Amazon ECS task definition API
        if: ${{ steps.CheckApiAffected.outputs.API_AFFECTED == 'api' }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: project-lc-api-dev-service
          cluster: project-lc-dev
          wait-for-service-stability: false

      - name: Prisma Migrate
        if: ${{ steps.CheckApiAffected.outputs.API_AFFECTED == 'api' }}
        run: yarn nx run prisma-orm:migrate-deploy
        env:
          DATABASE_URL: ${{ secrets.DEV_PRISMA_DATABASE_URL }}
