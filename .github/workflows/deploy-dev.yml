on:
  push:
    branches: [dev]
    paths:
      - 'apps/api/**'
      - 'apps/overlay/**'
      - 'apps/overlay-controller/**'
      - 'libs/firstmall-db/**'
      - 'libs/nest-core/**'
      - 'libs/nest-modules-*/**'
      - 'libs/utils/**'
      - 'libs/utils-backend/**'
      - 'libs/utils-s3/**'
      - 'libs/prisma-orm/**'
      - 'libs/shared-types/**'

name: Deploy to AWS ECS "Dev"
env:
  BEFORE_SHA: ${{ github.event.before }}
jobs:
  Build:
    name: Build Job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      #  Install All Dependencies
      - name: Install dependencies
        uses: bahmutov/npm-install@v1 # install dependencies using cache

      # Generate Prisma Client
      - name: Primsa generate
        run: yarn nx run prisma-orm:prisma-generate

      #  Build API server
      - name: Build
        run: yarn affected:build --prod --base=$BEFORE_SHA

      - name: Configure AWS credentials
        if: ${{ success() }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROJECT_LC }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROJECT_LC }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        if: ${{ success() }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Dockerize and Push to ECR
      - name: Dockerize
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          yarn affected \
            --target=dockerize-dev \
            --base=$BEFORE_SHA \
            --args="--registry=$ECR_REGISTRY"

  DeployAPI:
    name: Deploy API Job
    runs-on: [self-hosted, linux, project-lc-dev]
    needs: [Build]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      #  Install All Dependencies
      - name: Install dependencies
        uses: bahmutov/npm-install@v1 # install dependencies using cache

      - name: Check api affected
        run: tools/check-need-api-deploy.sh

      - name: Configure AWS credentials
        if: ${{ success() }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROJECT_LC }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROJECT_LC }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        if: ${{ success() }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition API
        if: ${{ success() }}
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: apps/api/task-definition-dev.json
          container-name: project-lc-api-dev
          image: ${{ steps.login-ecr.outputs.registry }}/project-lc-api-dev:latest

      - name: Deploy Amazon ECS task definition API
        if: ${{ success() }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: project-lc-api-dev-service
          cluster: project-lc-dev
          wait-for-service-stability: false

      - name: Prisma Migrate
        if: ${{ success() }}
        run: yarn nx run prisma-orm:migrate-reset
        env:
          DATABASE_URL: ${{ secrets.DEV_PRISMA_DATABASE_URL }}

  DeployOverlay:
    name: Deploy Overlay Job
    runs-on: [self-hosted, linux, project-lc-dev]
    needs: [Build]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      #  Install All Dependencies
      - name: Install dependencies
        uses: bahmutov/npm-install@v1 # install dependencies using cache

      - name: Check Overlay affected
        run: tools/check-need-overlay-deploy.sh

      - name: Configure AWS credentials
        if: ${{ success() }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROJECT_LC }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROJECT_LC }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        if: ${{ success() }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition Overlay
        if: ${{ success() }}
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: apps/overlay/task-definition-dev.json
          container-name: project-lc-overlay-dev
          image: ${{ steps.login-ecr.outputs.registry }}/project-lc-overlay-dev:latest

      - name: Deploy Amazon ECS task definition Overlay
        if: ${{ success() }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: project-lc-overlay-dev-service
          cluster: project-lc-dev
          wait-for-service-stability: false

      - name: Prisma Migrate
        if: ${{ success() }}
        run: yarn nx run prisma-orm:migrate-reset
        env:
          DATABASE_URL: ${{ secrets.DEV_PRISMA_DATABASE_URL }}

  DeployOverlayController:
    name: Deploy OverlayController Job
    runs-on: [self-hosted, linux, project-lc-dev]
    needs: [Build]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      #  Install All Dependencies
      - name: Install dependencies
        uses: bahmutov/npm-install@v1 # install dependencies using cache

      - name: Check Overlay affected
        run: tools/check-need-overlay-controller-deploy.sh

      - name: Configure AWS credentials
        if: ${{ success() }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROJECT_LC }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROJECT_LC }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        if: ${{ success() }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition Overlay-controller
        if: ${{ success() }}
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: apps/overlay-controller/task-definition-dev.json
          container-name: project-lc-overlay-controller-dev
          image: ${{ steps.login-ecr.outputs.registry }}/project-lc-overlay-controller-dev:latest

      - name: Deploy Amazon ECS task definition Overlay-controller
        if: ${{ success() }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: project-lc-overlay-controller-dev-service
          cluster: project-lc-dev
          wait-for-service-stability: false

      - name: Prisma Migrate
        if: ${{ success() }}
        run: yarn nx run prisma-orm:migrate-reset
        env:
          DATABASE_URL: ${{ secrets.DEV_PRISMA_DATABASE_URL }}

  DeployRealtimeAPI:
    name: Deploy RealtimeAPI Job
    runs-on: [self-hosted, linux, project-lc-dev]
    needs: [Build]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      #  Install All Dependencies
      - name: Install dependencies
        uses: bahmutov/npm-install@v1 # install dependencies using cache

      - name: Check RealtimeAPI affected
        run: tools/check-need-realtimeapi-deploy.sh

      - name: Configure AWS credentials
        if: ${{ success() }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROJECT_LC }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROJECT_LC }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        if: ${{ success() }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition RealtimeAPI
        if: ${{ success() }}
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: apps/api-realtime/task-definition-dev.json
          container-name: project-lc-realtimeapi-dev
          image: ${{ steps.login-ecr.outputs.registry }}/project-lc-realtimeapi-dev:latest

      - name: Deploy Amazon ECS task definition RealtimeAPI
        if: ${{ success() }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: project-lc-realtimeapi-dev-service
          cluster: project-lc-dev
          wait-for-service-stability: false
