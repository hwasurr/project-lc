on:
  push:
    branches: [master]
    paths:
      - 'apps/api/**'
      - 'apps/overlay/**'
      - 'apps/overlay-controller/**'
      - 'apps/api-realtime/**'
      - 'apps/batch-inactive-handler/**'
      - 'apps/batch-virtual-account/**'
      - 'apps/mailer/**'
      - 'libs/firstmall-db/**'
      - 'libs/nest-core/**'
      - 'libs/nest-modules-*/**'
      - 'libs/utils/**'
      - 'libs/utils-backend/**'
      - 'libs/utils-s3/**'
      - 'libs/prisma-orm/**'
      - 'libs/shared-types/**'

name: Deploy to AWS ECS "Prod"
env:
  DATABASE_URL: ${{ secrets.PROD_PRISMA_DATABASE_URL }}
jobs:
  Build:
    name: Build Job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      #  Install All Dependencies
      - name: Install dependencies
        uses: bahmutov/npm-install@v1 # install dependencies using cache

      # Generate Prisma Client
      - name: Primsa generate
        run: yarn nx run prisma-orm:prisma-generate

      #  Build API server
      - name: Build
        run: yarn affected:build --prod

      - name: Configure AWS credentials
        if: ${{ success() }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROJECT_LC }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROJECT_LC }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        if: ${{ success() }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Dockerize and Push to ECR
      - name: Dockerize
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          yarn affected \
            --target=dockerize \
            --args="--registry=$ECR_REGISTRY --tag=prod-$IMAGE_TAG"

  DeployAPI:
    name: Deploy API Job
    runs-on: [self-hosted, linux, project-lc]
    needs: [Build]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install dependencies #  Install All Dependencies
        run: yarn install

      - name: Check api affected
        run: tools/check-need-deploy.sh api

      - name: Configure AWS credentials
        if: ${{ success() }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROJECT_LC }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROJECT_LC }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        if: ${{ success() }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition API
        if: ${{ success() }}
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: apps/api/task-definition.json
          container-name: project-lc-api
          image: ${{ steps.login-ecr.outputs.registry }}/project-lc-api:prod-${{ github.sha }}

      - name: Deploy Amazon ECS task definition API
        if: ${{ success() }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: project-lc-api-service
          cluster: project-lc-prod
          wait-for-service-stability: false

      - name: Prisma Migrate
        if: ${{ success() }}
        run: yarn nx run prisma-orm:migrate-deploy
        env:
          DATABASE_URL: ${{ secrets.PROD_PRISMA_DATABASE_URL }}

  DeployOverlay:
    name: Deploy Overlay Job
    runs-on: [self-hosted, linux, project-lc]
    needs: [Build]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install dependencies #  Install All Dependencies
        run: yarn install

      - name: Check Overlay affected
        run: tools/check-need-deploy.sh overlay

      - name: Configure AWS credentials
        if: ${{ success() }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROJECT_LC }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROJECT_LC }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        if: ${{ success() }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition Overlay
        if: ${{ success() }}
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: apps/overlay/task-definition.json
          container-name: project-lc-overlay
          image: ${{ steps.login-ecr.outputs.registry }}/project-lc-overlay:prod-${{ github.sha }}

      - name: Deploy Amazon ECS task definition Overlay
        if: ${{ success() }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: project-lc-overlay-service
          cluster: project-lc-prod
          wait-for-service-stability: false

      - name: Prisma Migrate
        if: ${{ success() }}
        run: yarn nx run prisma-orm:migrate-deploy
        env:
          DATABASE_URL: ${{ secrets.PROD_PRISMA_DATABASE_URL }}

  DeployOverlayController:
    name: Deploy OverlayController Job
    runs-on: [self-hosted, linux, project-lc]
    needs: [Build]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install dependencies #  Install All Dependencies
        run: yarn install

      - name: Check Overlay affected
        run: tools/check-need-deploy.sh overlay-controller

      - name: Configure AWS credentials
        if: ${{ success() }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROJECT_LC }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROJECT_LC }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        if: ${{ success() }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition Overlay-controller
        if: ${{ success() }}
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: apps/overlay-controller/task-definition.json
          container-name: project-lc-overlay-controller
          image: ${{ steps.login-ecr.outputs.registry }}/project-lc-overlay-controller:prod-${{ github.sha }}

      - name: Deploy Amazon ECS task definition Overlay-controller
        if: ${{ success() }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: project-lc-overlay-controller-service
          cluster: project-lc-prod
          wait-for-service-stability: false

      - name: Prisma Migrate
        if: ${{ success() }}
        run: yarn nx run prisma-orm:migrate-deploy
        env:
          DATABASE_URL: ${{ secrets.PROD_PRISMA_DATABASE_URL }}

  DeployRealtimeAPI:
    name: Deploy RealtimeAPI Job
    runs-on: [self-hosted, linux, project-lc]
    needs: [Build]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install dependencies #  Install All Dependencies
        run: yarn install

      - name: Check RealtimeAPI affected
        run: tools/check-need-deploy.sh api-realtime

      - name: Configure AWS credentials
        if: ${{ success() }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROJECT_LC }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROJECT_LC }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        if: ${{ success() }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition RealtimeAPI
        if: ${{ success() }}
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: apps/api-realtime/task-definition.json
          container-name: project-lc-realtimeapi
          image: ${{ steps.login-ecr.outputs.registry }}/project-lc-realtimeapi:prod-${{ github.sha }}

      - name: Deploy Amazon ECS task definition RealtimeAPI
        if: ${{ success() }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: project-lc-realtimeapi-service
          cluster: project-lc-prod
          wait-for-service-stability: false

  DeployMailer:
    name: Deploy Mailer Job
    runs-on: [self-hosted, linux, project-lc]
    needs: [Build]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install dependencies #  Install All Dependencies
        run: yarn install

      - name: Check Mailer affected
        run: tools/check-need-deploy.sh mailer

      - name: Configure AWS credentials
        if: ${{ success() }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROJECT_LC }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROJECT_LC }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        if: ${{ success() }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition Mailer
        if: ${{ success() }}
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: apps/mailer/task-definition.json
          container-name: project-lc-mailer
          image: ${{ steps.login-ecr.outputs.registry }}/project-lc-mailer:prod-${{ github.sha }}

      - name: Deploy Amazon ECS task definition Mailer
        if: ${{ success() }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: project-lc-mailer-service
          cluster: project-lc-prod
          wait-for-service-stability: false

  DeployInactiveBatch:
    name: Deploy Inactive Batch Job
    runs-on: [self-hosted, linux, project-lc]
    needs: [Build]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install dependencies #  Install All Dependencies
        run: yarn install

      - name: Check InactiveBatch affected
        run: tools/check-need-deploy.sh batch-inactive-handler

      - name: Configure AWS credentials
        if: ${{ success() }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROJECT_LC }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROJECT_LC }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        if: ${{ success() }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition InactiveBatch
        if: ${{ success() }}
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: apps/batch-inactive-handler/task-definition.json
          container-name: project-lc-inactive-batch
          image: ${{ steps.login-ecr.outputs.registry }}/project-lc-inactive-batch:prod-${{ github.sha }}

      - name: Deploy Amazon ECS task definition
        uses: airfordable/ecs-deploy-task-definition-to-scheduled-task@v2.0.0
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          cluster: project-lc-prod
          wait-for-service-stability: false

  DeployVirtualAccountBatch:
    name: Deploy VirtualAccount Batch Job
    runs-on: [self-hosted, linux, project-lc]
    needs: [Build]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install dependencies #  Install All Dependencies
        run: yarn install

      - name: Check VirtualAccountBatch affected
        run: tools/check-need-deploy.sh batch-virtual-account

      - name: Configure AWS credentials
        if: ${{ success() }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROJECT_LC }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROJECT_LC }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        if: ${{ success() }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition VirtualAccountBatch
        if: ${{ success() }}
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: apps/batch-virtual-account/task-definition.json
          container-name: project-lc-virtual-account-batch
          image: ${{ steps.login-ecr.outputs.registry }}/project-lc-virtual-account-batch:prod-${{ github.sha }}

      - name: Deploy Amazon ECS task definition
        uses: airfordable/ecs-deploy-task-definition-to-scheduled-task@v2.0.0
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          cluster: project-lc-prod
          wait-for-service-stability: false
