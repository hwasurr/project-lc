
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.28.0
 * Query Engine version: 89facabd0366f63911d089156a7a70125bfbcd27
 */
Prisma.prismaVersion = {
  client: "2.28.0",
  engine: "89facabd0366f63911d089156a7a70125bfbcd27"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.SellerScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password'
});

exports.Prisma.MailVerificationCodeScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  verificationCode: 'verificationCode',
  createDate: 'createDate'
});

exports.Prisma.SellerSocialAccountScalarFieldEnum = makeEnum({
  serviceId: 'serviceId',
  provider: 'provider',
  name: 'name',
  registDate: 'registDate',
  profileImage: 'profileImage',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  sellerId: 'sellerId'
});

exports.Prisma.GoodsScalarFieldEnum = makeEnum({
  id: 'id',
  sellerId: 'sellerId',
  goods_name: 'goods_name',
  summary: 'summary',
  goods_status: 'goods_status',
  cancel_type: 'cancel_type',
  contents: 'contents',
  contents_mobile: 'contents_mobile',
  common_contents: 'common_contents',
  shipping_policy: 'shipping_policy',
  goods_shipping_policy: 'goods_shipping_policy',
  unlimit_shipping_price: 'unlimit_shipping_price',
  limit_shipping_ea: 'limit_shipping_ea',
  limit_shipping_price: 'limit_shipping_price',
  limit_shipping_subprice: 'limit_shipping_subprice',
  shipping_weight_policy: 'shipping_weight_policy',
  min_purchase_limit: 'min_purchase_limit',
  min_purchase_ea: 'min_purchase_ea',
  max_purchase_limit: 'max_purchase_limit',
  max_purchase_ea: 'max_purchase_ea',
  max_urchase_order_limit: 'max_urchase_order_limit',
  admin_memo: 'admin_memo',
  option_use: 'option_use',
  option_view_type: 'option_view_type',
  option_suboption_use: 'option_suboption_use',
  member_input_use: 'member_input_use',
  image: 'image'
});

exports.Prisma.GoodsConfirmationScalarFieldEnum = makeEnum({
  id: 'id',
  goodsId: 'goodsId',
  status: 'status',
  firstmallGoodsConnectionId: 'firstmallGoodsConnectionId'
});

exports.Prisma.GoodsOptionsScalarFieldEnum = makeEnum({
  id: 'id',
  goodsId: 'goodsId',
  default_option: 'default_option',
  option_type: 'option_type',
  option_title: 'option_title',
  option_code: 'option_code',
  consumer_price: 'consumer_price',
  price: 'price',
  color: 'color',
  weight: 'weight',
  option_view: 'option_view'
});

exports.Prisma.GoodsOptionsSuppliesScalarFieldEnum = makeEnum({
  id: 'id',
  goodsOptionsId: 'goodsOptionsId',
  stock: 'stock',
  badstock: 'badstock',
  safe_stock: 'safe_stock'
});

exports.Prisma.LiveCommerceRankingScalarFieldEnum = makeEnum({
  id: 'id',
  nickname: 'nickname',
  text: 'text',
  price: 'price',
  phoneCallEventFlag: 'phoneCallEventFlag',
  loginFlag: 'loginFlag',
  createdAt: 'createdAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});
exports.GoodsStatus = makeEnum({
  normal: 'normal',
  runout: 'runout',
  purchasing: 'purchasing',
  unsold: 'unsold'
});

exports.ShopOrGoods = makeEnum({
  shop: 'shop',
  goods: 'goods'
});

exports.LimitOrUnlimit = makeEnum({
  unlimit: 'unlimit',
  limit: 'limit'
});

exports.OptionViewType = makeEnum({
  divide: 'divide',
  join: 'join'
});

exports.GoodsConfirmationStatuses = makeEnum({
  waiting: 'waiting',
  confirmed: 'confirmed',
  rejected: 'rejected'
});

exports.YesOrNo = makeEnum({
  y: 'y',
  n: 'n'
});

exports.YesOrNo_UPPERCASE = makeEnum({
  Y: 'Y',
  N: 'N'
});

exports.Prisma.ModelName = makeEnum({
  Seller: 'Seller',
  MailVerificationCode: 'MailVerificationCode',
  SellerSocialAccount: 'SellerSocialAccount',
  Goods: 'Goods',
  GoodsConfirmation: 'GoodsConfirmation',
  GoodsOptions: 'GoodsOptions',
  GoodsOptionsSupplies: 'GoodsOptionsSupplies',
  LiveCommerceRanking: 'LiveCommerceRanking'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
